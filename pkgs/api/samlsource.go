// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SAMLSourceIdentity represents the Identity of the object.
var SAMLSourceIdentity = elemental.Identity{
	Name:     "samlsource",
	Category: "samlsources",
	Package:  "a3s",
	Private:  false,
}

// SAMLSourcesList represents a list of SAMLSources
type SAMLSourcesList []*SAMLSource

// Identity returns the identity of the objects in the list.
func (o SAMLSourcesList) Identity() elemental.Identity {

	return SAMLSourceIdentity
}

// Copy returns a pointer to a copy the SAMLSourcesList.
func (o SAMLSourcesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the SAMLSourcesList.
func (o SAMLSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SAMLSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SAMLSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SAMLSourcesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SAMLSourcesList converted to SparseSAMLSourcesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SAMLSourcesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSAMLSourcesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseSAMLSource)
	}

	return out
}

// Version returns the version of the content.
func (o SAMLSourcesList) Version() int {

	return 1
}

// SAMLSource represents the model of a samlsource
type SAMLSource struct {
	// ID is the identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Identity Provider Certificate in PEM format.
	IDPCertificate string `json:"IDPCertificate" msgpack:"IDPCertificate" bson:"idpcertificate" mapstructure:"IDPCertificate,omitempty"`

	// Identity Provider Issuer (also called Entity ID).
	IDPIssuer string `json:"IDPIssuer" msgpack:"IDPIssuer" bson:"idpissuer" mapstructure:"IDPIssuer,omitempty"`

	// Pass some XML data containing the IDP metadata that can be used for automatic
	// configuration. If you pass this attribute, every other one will be overwritten
	// with the data contained in the metadata file, but it does not take precendence
	// over IDPMetadataURL.
	IDPMetadata string `json:"IDPMetadata,omitempty" msgpack:"IDPMetadata,omitempty" bson:"-" mapstructure:"IDPMetadata,omitempty"`

	// The URL where to fetch the IDPMetadata. If this is set, all other IDP fields are
	// ignored and the metadata will be retrieved when needed for logging in.
	IDPMetadataURL string `json:"IDPMetadataURL,omitempty" msgpack:"IDPMetadataURL,omitempty" bson:"idpmetadataurl,omitempty" mapstructure:"IDPMetadataURL,omitempty"`

	// URL of the identity provider.
	IDPURL string `json:"IDPURL" msgpack:"IDPURL" bson:"idpurl" mapstructure:"IDPURL,omitempty"`

	// The AudienceURI expected for the response. If not provided, Acuvity will send
	// the issuer URL.
	AudienceURI string `json:"audienceURI" msgpack:"audienceURI" bson:"audienceuri" mapstructure:"audienceURI,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// A list of claims that will be filtered out from the identity token. A claim will
	// be ignored if it is prefixed with one of the items in the ignoredKeys list. This
	// runs before includedKeys computation.
	IgnoredKeys []string `json:"ignoredKeys" msgpack:"ignoredKeys" bson:"ignoredkeys" mapstructure:"ignoredKeys,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// A list of claims that defines which claims will be added to the identity
	// token. A claim will be included if it is prefixed with one of the items in the
	// includedKeys list. This runs after ignoreddKeys computation.
	IncludedKeys []string `json:"includedKeys" msgpack:"includedKeys" bson:"includedkeys" mapstructure:"includedKeys,omitempty"`

	// When true, translate some common keys to shorter versions. For instance,
	// `htps://schemas.microsoft.com/ws/2008/06/identity/claims/name=x` would become
	// `@ad:name=x`.
	KeysTranslationEnabled bool `json:"keysTranslationEnabled" msgpack:"keysTranslationEnabled" bson:"keystranslationenabled" mapstructure:"keysTranslationEnabled,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The Service Provider Issuer which is represented by the client ID. If not
	// provided, Acuvity will send the issuer URL.
	ServiceProviderIssuer string `json:"serviceProviderIssuer" msgpack:"serviceProviderIssuer" bson:"serviceproviderissuer" mapstructure:"serviceProviderIssuer,omitempty"`

	// If true, the issue request won't check the ResponseSignatureValidated.
	SkipResponseSignatureCheck bool `json:"skipResponseSignatureCheck" msgpack:"skipResponseSignatureCheck" bson:"skipresponsesignaturecheck" mapstructure:"skipResponseSignatureCheck,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSAMLSource returns a new *SAMLSource
func NewSAMLSource() *SAMLSource {

	return &SAMLSource{
		ModelVersion: 1,
		IgnoredKeys:  []string{},
		IncludedKeys: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *SAMLSource) Identity() elemental.Identity {

	return SAMLSourceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *SAMLSource) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *SAMLSource) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SAMLSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSAMLSource{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.IDPCertificate = o.IDPCertificate
	s.IDPIssuer = o.IDPIssuer
	s.IDPMetadataURL = o.IDPMetadataURL
	s.IDPURL = o.IDPURL
	s.AudienceURI = o.AudienceURI
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.IgnoredKeys = o.IgnoredKeys
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.IncludedKeys = o.IncludedKeys
	s.KeysTranslationEnabled = o.KeysTranslationEnabled
	s.Modifier = o.Modifier
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.ServiceProviderIssuer = o.ServiceProviderIssuer
	s.SkipResponseSignatureCheck = o.SkipResponseSignatureCheck
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SAMLSource) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesSAMLSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.IDPCertificate = s.IDPCertificate
	o.IDPIssuer = s.IDPIssuer
	o.IDPMetadataURL = s.IDPMetadataURL
	o.IDPURL = s.IDPURL
	o.AudienceURI = s.AudienceURI
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.IgnoredKeys = s.IgnoredKeys
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.IncludedKeys = s.IncludedKeys
	o.KeysTranslationEnabled = s.KeysTranslationEnabled
	o.Modifier = s.Modifier
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.ServiceProviderIssuer = s.ServiceProviderIssuer
	o.SkipResponseSignatureCheck = s.SkipResponseSignatureCheck
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SAMLSource) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *SAMLSource) BleveType() string {

	return "samlsource"
}

// DefaultOrder returns the list of default ordering fields.
func (o *SAMLSource) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *SAMLSource) Doc() string {

	return `Defines a remote SAML to use as an authentication source.`
}

func (o *SAMLSource) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetID returns the ID of the receiver.
func (o *SAMLSource) GetID() string {

	return o.ID
}

// SetID sets the property ID of the receiver using the given value.
func (o *SAMLSource) SetID(ID string) {

	o.ID = ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SAMLSource) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *SAMLSource) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetIgnoredKeys returns the IgnoredKeys of the receiver.
func (o *SAMLSource) GetIgnoredKeys() []string {

	return o.IgnoredKeys
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SAMLSource) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *SAMLSource) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SAMLSource) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *SAMLSource) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetIncludedKeys returns the IncludedKeys of the receiver.
func (o *SAMLSource) GetIncludedKeys() []string {

	return o.IncludedKeys
}

// GetNamespace returns the Namespace of the receiver.
func (o *SAMLSource) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *SAMLSource) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SAMLSource) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *SAMLSource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SAMLSource) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *SAMLSource) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *SAMLSource) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *SAMLSource) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *SAMLSource) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSAMLSource{
			ID:                         &o.ID,
			IDPCertificate:             &o.IDPCertificate,
			IDPIssuer:                  &o.IDPIssuer,
			IDPMetadata:                &o.IDPMetadata,
			IDPMetadataURL:             &o.IDPMetadataURL,
			IDPURL:                     &o.IDPURL,
			AudienceURI:                &o.AudienceURI,
			CreateTime:                 &o.CreateTime,
			Description:                &o.Description,
			IgnoredKeys:                &o.IgnoredKeys,
			ImportHash:                 &o.ImportHash,
			ImportLabel:                &o.ImportLabel,
			IncludedKeys:               &o.IncludedKeys,
			KeysTranslationEnabled:     &o.KeysTranslationEnabled,
			Modifier:                   o.Modifier,
			Name:                       &o.Name,
			Namespace:                  &o.Namespace,
			ServiceProviderIssuer:      &o.ServiceProviderIssuer,
			SkipResponseSignatureCheck: &o.SkipResponseSignatureCheck,
			UpdateTime:                 &o.UpdateTime,
			ZHash:                      &o.ZHash,
			Zone:                       &o.Zone,
		}
	}

	sp := &SparseSAMLSource{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "IDPCertificate":
			sp.IDPCertificate = &(o.IDPCertificate)
		case "IDPIssuer":
			sp.IDPIssuer = &(o.IDPIssuer)
		case "IDPMetadata":
			sp.IDPMetadata = &(o.IDPMetadata)
		case "IDPMetadataURL":
			sp.IDPMetadataURL = &(o.IDPMetadataURL)
		case "IDPURL":
			sp.IDPURL = &(o.IDPURL)
		case "audienceURI":
			sp.AudienceURI = &(o.AudienceURI)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "ignoredKeys":
			sp.IgnoredKeys = &(o.IgnoredKeys)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "includedKeys":
			sp.IncludedKeys = &(o.IncludedKeys)
		case "keysTranslationEnabled":
			sp.KeysTranslationEnabled = &(o.KeysTranslationEnabled)
		case "modifier":
			sp.Modifier = o.Modifier
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "serviceProviderIssuer":
			sp.ServiceProviderIssuer = &(o.ServiceProviderIssuer)
		case "skipResponseSignatureCheck":
			sp.SkipResponseSignatureCheck = &(o.SkipResponseSignatureCheck)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseSAMLSource to the object.
func (o *SAMLSource) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSAMLSource)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.IDPCertificate != nil {
		o.IDPCertificate = *so.IDPCertificate
	}
	if so.IDPIssuer != nil {
		o.IDPIssuer = *so.IDPIssuer
	}
	if so.IDPMetadata != nil {
		o.IDPMetadata = *so.IDPMetadata
	}
	if so.IDPMetadataURL != nil {
		o.IDPMetadataURL = *so.IDPMetadataURL
	}
	if so.IDPURL != nil {
		o.IDPURL = *so.IDPURL
	}
	if so.AudienceURI != nil {
		o.AudienceURI = *so.AudienceURI
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.IgnoredKeys != nil {
		o.IgnoredKeys = *so.IgnoredKeys
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.IncludedKeys != nil {
		o.IncludedKeys = *so.IncludedKeys
	}
	if so.KeysTranslationEnabled != nil {
		o.KeysTranslationEnabled = *so.KeysTranslationEnabled
	}
	if so.Modifier != nil {
		o.Modifier = so.Modifier
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ServiceProviderIssuer != nil {
		o.ServiceProviderIssuer = *so.ServiceProviderIssuer
	}
	if so.SkipResponseSignatureCheck != nil {
		o.SkipResponseSignatureCheck = *so.SkipResponseSignatureCheck
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the SAMLSource.
func (o *SAMLSource) DeepCopy() *SAMLSource {

	if o == nil {
		return nil
	}

	out := &SAMLSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SAMLSource.
func (o *SAMLSource) DeepCopyInto(out *SAMLSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SAMLSource: %s", err))
	}

	*out = *target.(*SAMLSource)
}

// Validate valides the current information stored into the structure.
func (o *SAMLSource) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateKeys("ignoredKeys", o.IgnoredKeys); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateKeys("includedKeys", o.IncludedKeys); err != nil {
		errors = errors.Append(err)
	}

	if o.Modifier != nil {
		elemental.ResetDefaultForZeroValues(o.Modifier)
		if err := o.Modifier.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	// Custom object validation.
	if err := ValidateSAMLSource(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*SAMLSource) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SAMLSourceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SAMLSourceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*SAMLSource) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SAMLSourceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *SAMLSource) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "IDPCertificate":
		return o.IDPCertificate
	case "IDPIssuer":
		return o.IDPIssuer
	case "IDPMetadata":
		return o.IDPMetadata
	case "IDPMetadataURL":
		return o.IDPMetadataURL
	case "IDPURL":
		return o.IDPURL
	case "audienceURI":
		return o.AudienceURI
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "ignoredKeys":
		return o.IgnoredKeys
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "includedKeys":
		return o.IncludedKeys
	case "keysTranslationEnabled":
		return o.KeysTranslationEnabled
	case "modifier":
		return o.Modifier
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "serviceProviderIssuer":
		return o.ServiceProviderIssuer
	case "skipResponseSignatureCheck":
		return o.SkipResponseSignatureCheck
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// SAMLSourceAttributesMap represents the map of attribute for SAMLSource.
var SAMLSourceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"IDPCertificate": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpcertificate",
		ConvertedName:  "IDPCertificate",
		Description:    `Identity Provider Certificate in PEM format.`,
		Exposed:        true,
		Name:           "IDPCertificate",
		Stored:         true,
		Type:           "string",
	},
	"IDPIssuer": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpissuer",
		ConvertedName:  "IDPIssuer",
		Description:    `Identity Provider Issuer (also called Entity ID).`,
		Exposed:        true,
		Name:           "IDPIssuer",
		Stored:         true,
		Type:           "string",
	},
	"IDPMetadata": {
		AllowedChoices: []string{},
		ConvertedName:  "IDPMetadata",
		Description: `Pass some XML data containing the IDP metadata that can be used for automatic
configuration. If you pass this attribute, every other one will be overwritten
with the data contained in the metadata file, but it does not take precendence
over IDPMetadataURL.`,
		Exposed: true,
		Name:    "IDPMetadata",
		Type:    "string",
	},
	"IDPMetadataURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpmetadataurl",
		ConvertedName:  "IDPMetadataURL",
		Description: `The URL where to fetch the IDPMetadata. If this is set, all other IDP fields are
ignored and the metadata will be retrieved when needed for logging in.`,
		Exposed: true,
		Name:    "IDPMetadataURL",
		Stored:  true,
		Type:    "string",
	},
	"IDPURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpurl",
		ConvertedName:  "IDPURL",
		Description:    `URL of the identity provider.`,
		Exposed:        true,
		Name:           "IDPURL",
		Stored:         true,
		Type:           "string",
	},
	"AudienceURI": {
		AllowedChoices: []string{},
		BSONFieldName:  "audienceuri",
		ConvertedName:  "AudienceURI",
		Description: `The AudienceURI expected for the response. If not provided, Acuvity will send
the issuer URL.`,
		Exposed: true,
		Name:    "audienceURI",
		Stored:  true,
		Type:    "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"IgnoredKeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignoredkeys",
		ConvertedName:  "IgnoredKeys",
		Description: `A list of claims that will be filtered out from the identity token. A claim will
be ignored if it is prefixed with one of the items in the ignoredKeys list. This
runs before includedKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "ignoredKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"IncludedKeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "includedkeys",
		ConvertedName:  "IncludedKeys",
		Description: `A list of claims that defines which claims will be added to the identity
token. A claim will be included if it is prefixed with one of the items in the
includedKeys list. This runs after ignoreddKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "includedKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"KeysTranslationEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "keystranslationenabled",
		ConvertedName:  "KeysTranslationEnabled",
		Description: `When true, translate some common keys to shorter versions. For instance,
` + "`" + `htps://schemas.microsoft.com/ws/2008/06/identity/claims/name=x` + "`" + ` would become
` + "`" + `@ad:name=x` + "`" + `.`,
		Exposed: true,
		Name:    "keysTranslationEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"Modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ServiceProviderIssuer": {
		AllowedChoices: []string{},
		BSONFieldName:  "serviceproviderissuer",
		ConvertedName:  "ServiceProviderIssuer",
		Description: `The Service Provider Issuer which is represented by the client ID. If not
provided, Acuvity will send the issuer URL.`,
		Exposed: true,
		Name:    "serviceProviderIssuer",
		Stored:  true,
		Type:    "string",
	},
	"SkipResponseSignatureCheck": {
		AllowedChoices: []string{},
		BSONFieldName:  "skipresponsesignaturecheck",
		ConvertedName:  "SkipResponseSignatureCheck",
		Description:    `If true, the issue request won't check the ResponseSignatureValidated.`,
		Exposed:        true,
		Name:           "skipResponseSignatureCheck",
		Stored:         true,
		Type:           "boolean",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SAMLSourceLowerCaseAttributesMap represents the map of attribute for SAMLSource.
var SAMLSourceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"idpcertificate": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpcertificate",
		ConvertedName:  "IDPCertificate",
		Description:    `Identity Provider Certificate in PEM format.`,
		Exposed:        true,
		Name:           "IDPCertificate",
		Stored:         true,
		Type:           "string",
	},
	"idpissuer": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpissuer",
		ConvertedName:  "IDPIssuer",
		Description:    `Identity Provider Issuer (also called Entity ID).`,
		Exposed:        true,
		Name:           "IDPIssuer",
		Stored:         true,
		Type:           "string",
	},
	"idpmetadata": {
		AllowedChoices: []string{},
		ConvertedName:  "IDPMetadata",
		Description: `Pass some XML data containing the IDP metadata that can be used for automatic
configuration. If you pass this attribute, every other one will be overwritten
with the data contained in the metadata file, but it does not take precendence
over IDPMetadataURL.`,
		Exposed: true,
		Name:    "IDPMetadata",
		Type:    "string",
	},
	"idpmetadataurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpmetadataurl",
		ConvertedName:  "IDPMetadataURL",
		Description: `The URL where to fetch the IDPMetadata. If this is set, all other IDP fields are
ignored and the metadata will be retrieved when needed for logging in.`,
		Exposed: true,
		Name:    "IDPMetadataURL",
		Stored:  true,
		Type:    "string",
	},
	"idpurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "idpurl",
		ConvertedName:  "IDPURL",
		Description:    `URL of the identity provider.`,
		Exposed:        true,
		Name:           "IDPURL",
		Stored:         true,
		Type:           "string",
	},
	"audienceuri": {
		AllowedChoices: []string{},
		BSONFieldName:  "audienceuri",
		ConvertedName:  "AudienceURI",
		Description: `The AudienceURI expected for the response. If not provided, Acuvity will send
the issuer URL.`,
		Exposed: true,
		Name:    "audienceURI",
		Stored:  true,
		Type:    "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"ignoredkeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignoredkeys",
		ConvertedName:  "IgnoredKeys",
		Description: `A list of claims that will be filtered out from the identity token. A claim will
be ignored if it is prefixed with one of the items in the ignoredKeys list. This
runs before includedKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "ignoredKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"includedkeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "includedkeys",
		ConvertedName:  "IncludedKeys",
		Description: `A list of claims that defines which claims will be added to the identity
token. A claim will be included if it is prefixed with one of the items in the
includedKeys list. This runs after ignoreddKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "includedKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"keystranslationenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "keystranslationenabled",
		ConvertedName:  "KeysTranslationEnabled",
		Description: `When true, translate some common keys to shorter versions. For instance,
` + "`" + `htps://schemas.microsoft.com/ws/2008/06/identity/claims/name=x` + "`" + ` would become
` + "`" + `@ad:name=x` + "`" + `.`,
		Exposed: true,
		Name:    "keysTranslationEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"serviceproviderissuer": {
		AllowedChoices: []string{},
		BSONFieldName:  "serviceproviderissuer",
		ConvertedName:  "ServiceProviderIssuer",
		Description: `The Service Provider Issuer which is represented by the client ID. If not
provided, Acuvity will send the issuer URL.`,
		Exposed: true,
		Name:    "serviceProviderIssuer",
		Stored:  true,
		Type:    "string",
	},
	"skipresponsesignaturecheck": {
		AllowedChoices: []string{},
		BSONFieldName:  "skipresponsesignaturecheck",
		ConvertedName:  "SkipResponseSignatureCheck",
		Description:    `If true, the issue request won't check the ResponseSignatureValidated.`,
		Exposed:        true,
		Name:           "skipResponseSignatureCheck",
		Stored:         true,
		Type:           "boolean",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseSAMLSourcesList represents a list of SparseSAMLSources
type SparseSAMLSourcesList []*SparseSAMLSource

// Identity returns the identity of the objects in the list.
func (o SparseSAMLSourcesList) Identity() elemental.Identity {

	return SAMLSourceIdentity
}

// Copy returns a pointer to a copy the SparseSAMLSourcesList.
func (o SparseSAMLSourcesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSAMLSourcesList.
func (o SparseSAMLSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSAMLSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSAMLSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSAMLSourcesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSAMLSourcesList converted to SAMLSourcesList.
func (o SparseSAMLSourcesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSAMLSourcesList) Version() int {

	return 1
}

// SparseSAMLSource represents the sparse version of a samlsource.
type SparseSAMLSource struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Identity Provider Certificate in PEM format.
	IDPCertificate *string `json:"IDPCertificate,omitempty" msgpack:"IDPCertificate,omitempty" bson:"idpcertificate,omitempty" mapstructure:"IDPCertificate,omitempty"`

	// Identity Provider Issuer (also called Entity ID).
	IDPIssuer *string `json:"IDPIssuer,omitempty" msgpack:"IDPIssuer,omitempty" bson:"idpissuer,omitempty" mapstructure:"IDPIssuer,omitempty"`

	// Pass some XML data containing the IDP metadata that can be used for automatic
	// configuration. If you pass this attribute, every other one will be overwritten
	// with the data contained in the metadata file, but it does not take precendence
	// over IDPMetadataURL.
	IDPMetadata *string `json:"IDPMetadata,omitempty" msgpack:"IDPMetadata,omitempty" bson:"-" mapstructure:"IDPMetadata,omitempty"`

	// The URL where to fetch the IDPMetadata. If this is set, all other IDP fields are
	// ignored and the metadata will be retrieved when needed for logging in.
	IDPMetadataURL *string `json:"IDPMetadataURL,omitempty" msgpack:"IDPMetadataURL,omitempty" bson:"idpmetadataurl,omitempty" mapstructure:"IDPMetadataURL,omitempty"`

	// URL of the identity provider.
	IDPURL *string `json:"IDPURL,omitempty" msgpack:"IDPURL,omitempty" bson:"idpurl,omitempty" mapstructure:"IDPURL,omitempty"`

	// The AudienceURI expected for the response. If not provided, Acuvity will send
	// the issuer URL.
	AudienceURI *string `json:"audienceURI,omitempty" msgpack:"audienceURI,omitempty" bson:"audienceuri,omitempty" mapstructure:"audienceURI,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// A list of claims that will be filtered out from the identity token. A claim will
	// be ignored if it is prefixed with one of the items in the ignoredKeys list. This
	// runs before includedKeys computation.
	IgnoredKeys *[]string `json:"ignoredKeys,omitempty" msgpack:"ignoredKeys,omitempty" bson:"ignoredkeys,omitempty" mapstructure:"ignoredKeys,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// A list of claims that defines which claims will be added to the identity
	// token. A claim will be included if it is prefixed with one of the items in the
	// includedKeys list. This runs after ignoreddKeys computation.
	IncludedKeys *[]string `json:"includedKeys,omitempty" msgpack:"includedKeys,omitempty" bson:"includedkeys,omitempty" mapstructure:"includedKeys,omitempty"`

	// When true, translate some common keys to shorter versions. For instance,
	// `htps://schemas.microsoft.com/ws/2008/06/identity/claims/name=x` would become
	// `@ad:name=x`.
	KeysTranslationEnabled *bool `json:"keysTranslationEnabled,omitempty" msgpack:"keysTranslationEnabled,omitempty" bson:"keystranslationenabled,omitempty" mapstructure:"keysTranslationEnabled,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The Service Provider Issuer which is represented by the client ID. If not
	// provided, Acuvity will send the issuer URL.
	ServiceProviderIssuer *string `json:"serviceProviderIssuer,omitempty" msgpack:"serviceProviderIssuer,omitempty" bson:"serviceproviderissuer,omitempty" mapstructure:"serviceProviderIssuer,omitempty"`

	// If true, the issue request won't check the ResponseSignatureValidated.
	SkipResponseSignatureCheck *bool `json:"skipResponseSignatureCheck,omitempty" msgpack:"skipResponseSignatureCheck,omitempty" bson:"skipresponsesignaturecheck,omitempty" mapstructure:"skipResponseSignatureCheck,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSAMLSource returns a new  SparseSAMLSource.
func NewSparseSAMLSource() *SparseSAMLSource {
	return &SparseSAMLSource{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSAMLSource) Identity() elemental.Identity {

	return SAMLSourceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSAMLSource) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSAMLSource) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSAMLSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSAMLSource{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.IDPCertificate != nil {
		s.IDPCertificate = o.IDPCertificate
	}
	if o.IDPIssuer != nil {
		s.IDPIssuer = o.IDPIssuer
	}
	if o.IDPMetadataURL != nil {
		s.IDPMetadataURL = o.IDPMetadataURL
	}
	if o.IDPURL != nil {
		s.IDPURL = o.IDPURL
	}
	if o.AudienceURI != nil {
		s.AudienceURI = o.AudienceURI
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.IgnoredKeys != nil {
		s.IgnoredKeys = o.IgnoredKeys
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.IncludedKeys != nil {
		s.IncludedKeys = o.IncludedKeys
	}
	if o.KeysTranslationEnabled != nil {
		s.KeysTranslationEnabled = o.KeysTranslationEnabled
	}
	if o.Modifier != nil {
		s.Modifier = o.Modifier
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ServiceProviderIssuer != nil {
		s.ServiceProviderIssuer = o.ServiceProviderIssuer
	}
	if o.SkipResponseSignatureCheck != nil {
		s.SkipResponseSignatureCheck = o.SkipResponseSignatureCheck
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSAMLSource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSAMLSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.IDPCertificate != nil {
		o.IDPCertificate = s.IDPCertificate
	}
	if s.IDPIssuer != nil {
		o.IDPIssuer = s.IDPIssuer
	}
	if s.IDPMetadataURL != nil {
		o.IDPMetadataURL = s.IDPMetadataURL
	}
	if s.IDPURL != nil {
		o.IDPURL = s.IDPURL
	}
	if s.AudienceURI != nil {
		o.AudienceURI = s.AudienceURI
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.IgnoredKeys != nil {
		o.IgnoredKeys = s.IgnoredKeys
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.IncludedKeys != nil {
		o.IncludedKeys = s.IncludedKeys
	}
	if s.KeysTranslationEnabled != nil {
		o.KeysTranslationEnabled = s.KeysTranslationEnabled
	}
	if s.Modifier != nil {
		o.Modifier = s.Modifier
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ServiceProviderIssuer != nil {
		o.ServiceProviderIssuer = s.ServiceProviderIssuer
	}
	if s.SkipResponseSignatureCheck != nil {
		o.SkipResponseSignatureCheck = s.SkipResponseSignatureCheck
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSAMLSource) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSAMLSource) ToPlain() elemental.PlainIdentifiable {

	out := NewSAMLSource()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.IDPCertificate != nil {
		out.IDPCertificate = *o.IDPCertificate
	}
	if o.IDPIssuer != nil {
		out.IDPIssuer = *o.IDPIssuer
	}
	if o.IDPMetadata != nil {
		out.IDPMetadata = *o.IDPMetadata
	}
	if o.IDPMetadataURL != nil {
		out.IDPMetadataURL = *o.IDPMetadataURL
	}
	if o.IDPURL != nil {
		out.IDPURL = *o.IDPURL
	}
	if o.AudienceURI != nil {
		out.AudienceURI = *o.AudienceURI
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.IgnoredKeys != nil {
		out.IgnoredKeys = *o.IgnoredKeys
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.IncludedKeys != nil {
		out.IncludedKeys = *o.IncludedKeys
	}
	if o.KeysTranslationEnabled != nil {
		out.KeysTranslationEnabled = *o.KeysTranslationEnabled
	}
	if o.Modifier != nil {
		out.Modifier = o.Modifier
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ServiceProviderIssuer != nil {
		out.ServiceProviderIssuer = *o.ServiceProviderIssuer
	}
	if o.SkipResponseSignatureCheck != nil {
		out.SkipResponseSignatureCheck = *o.SkipResponseSignatureCheck
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetID returns the ID of the receiver.
func (o *SparseSAMLSource) GetID() (out string) {

	if o.ID == nil {
		return
	}

	return *o.ID
}

// SetID sets the property ID of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetID(ID string) {

	o.ID = &ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseSAMLSource) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetIgnoredKeys returns the IgnoredKeys of the receiver.
func (o *SparseSAMLSource) GetIgnoredKeys() (out []string) {

	if o.IgnoredKeys == nil {
		return
	}

	return *o.IgnoredKeys
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseSAMLSource) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseSAMLSource) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetIncludedKeys returns the IncludedKeys of the receiver.
func (o *SparseSAMLSource) GetIncludedKeys() (out []string) {

	if o.IncludedKeys == nil {
		return
	}

	return *o.IncludedKeys
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseSAMLSource) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseSAMLSource) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseSAMLSource) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseSAMLSource) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseSAMLSource) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseSAMLSource.
func (o *SparseSAMLSource) DeepCopy() *SparseSAMLSource {

	if o == nil {
		return nil
	}

	out := &SparseSAMLSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSAMLSource.
func (o *SparseSAMLSource) DeepCopyInto(out *SparseSAMLSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSAMLSource: %s", err))
	}

	*out = *target.(*SparseSAMLSource)
}

type mongoAttributesSAMLSource struct {
	ID                         bson.ObjectId     `bson:"_id,omitempty"`
	IDPCertificate             string            `bson:"idpcertificate"`
	IDPIssuer                  string            `bson:"idpissuer"`
	IDPMetadataURL             string            `bson:"idpmetadataurl,omitempty"`
	IDPURL                     string            `bson:"idpurl"`
	AudienceURI                string            `bson:"audienceuri"`
	CreateTime                 time.Time         `bson:"createtime"`
	Description                string            `bson:"description"`
	IgnoredKeys                []string          `bson:"ignoredkeys"`
	ImportHash                 string            `bson:"importhash,omitempty"`
	ImportLabel                string            `bson:"importlabel,omitempty"`
	IncludedKeys               []string          `bson:"includedkeys"`
	KeysTranslationEnabled     bool              `bson:"keystranslationenabled"`
	Modifier                   *IdentityModifier `bson:"modifier,omitempty"`
	Name                       string            `bson:"name"`
	Namespace                  string            `bson:"namespace"`
	ServiceProviderIssuer      string            `bson:"serviceproviderissuer"`
	SkipResponseSignatureCheck bool              `bson:"skipresponsesignaturecheck"`
	UpdateTime                 time.Time         `bson:"updatetime"`
	ZHash                      int               `bson:"zhash"`
	Zone                       int               `bson:"zone"`
}
type mongoAttributesSparseSAMLSource struct {
	ID                         bson.ObjectId     `bson:"_id,omitempty"`
	IDPCertificate             *string           `bson:"idpcertificate,omitempty"`
	IDPIssuer                  *string           `bson:"idpissuer,omitempty"`
	IDPMetadataURL             *string           `bson:"idpmetadataurl,omitempty"`
	IDPURL                     *string           `bson:"idpurl,omitempty"`
	AudienceURI                *string           `bson:"audienceuri,omitempty"`
	CreateTime                 *time.Time        `bson:"createtime,omitempty"`
	Description                *string           `bson:"description,omitempty"`
	IgnoredKeys                *[]string         `bson:"ignoredkeys,omitempty"`
	ImportHash                 *string           `bson:"importhash,omitempty"`
	ImportLabel                *string           `bson:"importlabel,omitempty"`
	IncludedKeys               *[]string         `bson:"includedkeys,omitempty"`
	KeysTranslationEnabled     *bool             `bson:"keystranslationenabled,omitempty"`
	Modifier                   *IdentityModifier `bson:"modifier,omitempty"`
	Name                       *string           `bson:"name,omitempty"`
	Namespace                  *string           `bson:"namespace,omitempty"`
	ServiceProviderIssuer      *string           `bson:"serviceproviderissuer,omitempty"`
	SkipResponseSignatureCheck *bool             `bson:"skipresponsesignaturecheck,omitempty"`
	UpdateTime                 *time.Time        `bson:"updatetime,omitempty"`
	ZHash                      *int              `bson:"zhash,omitempty"`
	Zone                       *int              `bson:"zone,omitempty"`
}
