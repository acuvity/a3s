// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// OktaEventIdentity represents the Identity of the object.
var OktaEventIdentity = elemental.Identity{
	Name:     "oktaevent",
	Category: "oktaevents",
	Package:  "a3s",
	Private:  false,
}

// OktaEventsList represents a list of OktaEvents
type OktaEventsList []*OktaEvent

// Identity returns the identity of the objects in the list.
func (o OktaEventsList) Identity() elemental.Identity {

	return OktaEventIdentity
}

// Copy returns a pointer to a copy the OktaEventsList.
func (o OktaEventsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the OktaEventsList.
func (o OktaEventsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*OktaEvent))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o OktaEventsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o OktaEventsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the OktaEventsList converted to SparseOktaEventsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o OktaEventsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseOktaEventsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseOktaEvent)
	}

	return out
}

// Version returns the version of the content.
func (o OktaEventsList) Version() int {

	return 1
}

// OktaEvent represents the model of a oktaevent
type OktaEvent struct {
	// The raw content of the event event.
	Payload string `json:"payload" msgpack:"payload" bson:"-" mapstructure:"payload,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewOktaEvent returns a new *OktaEvent
func NewOktaEvent() *OktaEvent {

	return &OktaEvent{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *OktaEvent) Identity() elemental.Identity {

	return OktaEventIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *OktaEvent) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *OktaEvent) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OktaEvent) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesOktaEvent{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OktaEvent) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesOktaEvent{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *OktaEvent) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *OktaEvent) BleveType() string {

	return "oktaevent"
}

// DefaultOrder returns the list of default ordering fields.
func (o *OktaEvent) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *OktaEvent) Doc() string {

	return `API to handle okta event hooks.`
}

func (o *OktaEvent) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *OktaEvent) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseOktaEvent{
			Payload: &o.Payload,
		}
	}

	sp := &SparseOktaEvent{}
	for _, f := range fields {
		switch f {
		case "payload":
			sp.Payload = &(o.Payload)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseOktaEvent to the object.
func (o *OktaEvent) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseOktaEvent)
	if so.Payload != nil {
		o.Payload = *so.Payload
	}
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *OktaEvent) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *OktaEvent) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DeepCopy returns a deep copy if the OktaEvent.
func (o *OktaEvent) DeepCopy() *OktaEvent {

	if o == nil {
		return nil
	}

	out := &OktaEvent{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *OktaEvent.
func (o *OktaEvent) DeepCopyInto(out *OktaEvent) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy OktaEvent: %s", err))
	}

	*out = *target.(*OktaEvent)
}

// Validate valides the current information stored into the structure.
func (o *OktaEvent) Validate() error {

	elemental.ResetDefaultForZeroValues(o)

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*OktaEvent) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := OktaEventAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return OktaEventLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*OktaEvent) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return OktaEventAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *OktaEvent) ValueForAttribute(name string) any {

	switch name {
	case "payload":
		return o.Payload
	}

	return nil
}

// OktaEventAttributesMap represents the map of attribute for OktaEvent.
var OktaEventAttributesMap = map[string]elemental.AttributeSpecification{
	"Payload": {
		AllowedChoices: []string{},
		ConvertedName:  "Payload",
		Description:    `The raw content of the event event.`,
		Exposed:        true,
		Name:           "payload",
		Type:           "string",
	},
}

// OktaEventLowerCaseAttributesMap represents the map of attribute for OktaEvent.
var OktaEventLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"payload": {
		AllowedChoices: []string{},
		ConvertedName:  "Payload",
		Description:    `The raw content of the event event.`,
		Exposed:        true,
		Name:           "payload",
		Type:           "string",
	},
}

// SparseOktaEventsList represents a list of SparseOktaEvents
type SparseOktaEventsList []*SparseOktaEvent

// Identity returns the identity of the objects in the list.
func (o SparseOktaEventsList) Identity() elemental.Identity {

	return OktaEventIdentity
}

// Copy returns a pointer to a copy the SparseOktaEventsList.
func (o SparseOktaEventsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseOktaEventsList.
func (o SparseOktaEventsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseOktaEvent))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseOktaEventsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseOktaEventsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseOktaEventsList converted to OktaEventsList.
func (o SparseOktaEventsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseOktaEventsList) Version() int {

	return 1
}

// SparseOktaEvent represents the sparse version of a oktaevent.
type SparseOktaEvent struct {
	// The raw content of the event event.
	Payload *string `json:"payload,omitempty" msgpack:"payload,omitempty" bson:"-" mapstructure:"payload,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseOktaEvent returns a new  SparseOktaEvent.
func NewSparseOktaEvent() *SparseOktaEvent {
	return &SparseOktaEvent{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseOktaEvent) Identity() elemental.Identity {

	return OktaEventIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseOktaEvent) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseOktaEvent) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOktaEvent) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseOktaEvent{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOktaEvent) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseOktaEvent{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseOktaEvent) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseOktaEvent) ToPlain() elemental.PlainIdentifiable {

	out := NewOktaEvent()
	if o.Payload != nil {
		out.Payload = *o.Payload
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparseOktaEvent) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparseOktaEvent) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DeepCopy returns a deep copy if the SparseOktaEvent.
func (o *SparseOktaEvent) DeepCopy() *SparseOktaEvent {

	if o == nil {
		return nil
	}

	out := &SparseOktaEvent{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseOktaEvent.
func (o *SparseOktaEvent) DeepCopyInto(out *SparseOktaEvent) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseOktaEvent: %s", err))
	}

	*out = *target.(*SparseOktaEvent)
}

type mongoAttributesOktaEvent struct {
}
type mongoAttributesSparseOktaEvent struct {
}
