// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// IssueHTTP represents the model of a issuehttp
type IssueHTTP struct {
	// Time based one time password, if needed.
	TOTP string `json:"TOTP,omitempty" msgpack:"TOTP,omitempty" bson:"-" mapstructure:"TOTP,omitempty"`

	// The password for the user.
	Password string `json:"password" msgpack:"password" bson:"-" mapstructure:"password,omitempty"`

	// The username.
	Username string `json:"username" msgpack:"username" bson:"-" mapstructure:"username,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewIssueHTTP returns a new *IssueHTTP
func NewIssueHTTP() *IssueHTTP {

	return &IssueHTTP{
		ModelVersion: 1,
	}
}
func (o *IssueHTTP) Identity() elemental.Identity {

	return elemental.Identity{}
}
func (o *IssueHTTP) Identifier() string {

	return ""
}
func (o *IssueHTTP) SetIdentifier(id string) {
	panic("you cannot set identifier on a detached object")
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *IssueHTTP) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesIssueHTTP{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *IssueHTTP) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesIssueHTTP{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *IssueHTTP) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *IssueHTTP) BleveType() string {

	return "issuehttp"
}

// Doc returns the documentation for the object
func (o *IssueHTTP) Doc() string {

	return `Additional issuing information for the HTTP source.`
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *IssueHTTP) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *IssueHTTP) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	return nil
}

// DeepCopy returns a deep copy if the IssueHTTP.
func (o *IssueHTTP) DeepCopy() *IssueHTTP {

	if o == nil {
		return nil
	}

	out := &IssueHTTP{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *IssueHTTP.
func (o *IssueHTTP) DeepCopyInto(out *IssueHTTP) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy IssueHTTP: %s", err))
	}

	*out = *target.(*IssueHTTP)
}

// Validate valides the current information stored into the structure.
func (o *IssueHTTP) Validate() error {

	elemental.ResetDefaultForZeroValues(o)

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("password", o.Password); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("username", o.Username); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*IssueHTTP) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := IssueHTTPAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return IssueHTTPLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*IssueHTTP) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return IssueHTTPAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *IssueHTTP) ValueForAttribute(name string) any {

	switch name {
	case "TOTP":
		return o.TOTP
	case "password":
		return o.Password
	case "username":
		return o.Username
	}

	return nil
}

// IssueHTTPAttributesMap represents the map of attribute for IssueHTTP.
var IssueHTTPAttributesMap = map[string]elemental.AttributeSpecification{
	"TOTP": {
		AllowedChoices: []string{},
		ConvertedName:  "TOTP",
		Description:    `Time based one time password, if needed.`,
		Exposed:        true,
		Name:           "TOTP",
		Type:           "string",
	},
	"Password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The password for the user.`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
	"Username": {
		AllowedChoices: []string{},
		ConvertedName:  "Username",
		Description:    `The username.`,
		Exposed:        true,
		Name:           "username",
		Required:       true,
		Type:           "string",
	},
}

// IssueHTTPLowerCaseAttributesMap represents the map of attribute for IssueHTTP.
var IssueHTTPLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"totp": {
		AllowedChoices: []string{},
		ConvertedName:  "TOTP",
		Description:    `Time based one time password, if needed.`,
		Exposed:        true,
		Name:           "TOTP",
		Type:           "string",
	},
	"password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The password for the user.`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
	"username": {
		AllowedChoices: []string{},
		ConvertedName:  "Username",
		Description:    `The username.`,
		Exposed:        true,
		Name:           "username",
		Required:       true,
		Type:           "string",
	},
}

type mongoAttributesIssueHTTP struct {
}
