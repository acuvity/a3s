// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// IssueSAML represents the model of a issuesaml
type IssueSAML struct {
	// OIDC redirect url.
	SAMLResponse string `json:"SAMLResponse,omitempty" msgpack:"SAMLResponse,omitempty" bson:"-" mapstructure:"SAMLResponse,omitempty"`

	// Contains the auth URL is noAuthRedirect is set to true.
	AuthURL string `json:"authURL,omitempty" msgpack:"authURL,omitempty" bson:"-" mapstructure:"authURL,omitempty"`

	// If set, instruct the server to return the OIDC auth url in authURL instead of
	// performing an HTTP redirection.
	NoAuthRedirect bool `json:"noAuthRedirect" msgpack:"noAuthRedirect" bson:"-" mapstructure:"noAuthRedirect,omitempty"`

	// OIDC redirect url in case of error.
	RedirectErrorURL string `json:"redirectErrorURL" msgpack:"redirectErrorURL" bson:"-" mapstructure:"redirectErrorURL,omitempty"`

	// OIDC redirect url.
	RedirectURL string `json:"redirectURL" msgpack:"redirectURL" bson:"-" mapstructure:"redirectURL,omitempty"`

	// OIDC ceremony state.
	RelayState string `json:"relayState,omitempty" msgpack:"relayState,omitempty" bson:"-" mapstructure:"relayState,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewIssueSAML returns a new *IssueSAML
func NewIssueSAML() *IssueSAML {

	return &IssueSAML{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *IssueSAML) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesIssueSAML{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *IssueSAML) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesIssueSAML{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *IssueSAML) BleveType() string {

	return "issuesaml"
}

// DeepCopy returns a deep copy if the IssueSAML.
func (o *IssueSAML) DeepCopy() *IssueSAML {

	if o == nil {
		return nil
	}

	out := &IssueSAML{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *IssueSAML.
func (o *IssueSAML) DeepCopyInto(out *IssueSAML) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy IssueSAML: %s", err))
	}

	*out = *target.(*IssueSAML)
}

// Validate valides the current information stored into the structure.
func (o *IssueSAML) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*IssueSAML) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := IssueSAMLAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return IssueSAMLLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*IssueSAML) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return IssueSAMLAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *IssueSAML) ValueForAttribute(name string) any {

	switch name {
	case "SAMLResponse":
		return o.SAMLResponse
	case "authURL":
		return o.AuthURL
	case "noAuthRedirect":
		return o.NoAuthRedirect
	case "redirectErrorURL":
		return o.RedirectErrorURL
	case "redirectURL":
		return o.RedirectURL
	case "relayState":
		return o.RelayState
	}

	return nil
}

// IssueSAMLAttributesMap represents the map of attribute for IssueSAML.
var IssueSAMLAttributesMap = map[string]elemental.AttributeSpecification{
	"SAMLResponse": {
		AllowedChoices: []string{},
		ConvertedName:  "SAMLResponse",
		Description:    `OIDC redirect url.`,
		Exposed:        true,
		Name:           "SAMLResponse",
		Type:           "string",
	},
	"AuthURL": {
		AllowedChoices: []string{},
		ConvertedName:  "AuthURL",
		Description:    `Contains the auth URL is noAuthRedirect is set to true.`,
		Exposed:        true,
		Name:           "authURL",
		ReadOnly:       true,
		Type:           "string",
	},
	"NoAuthRedirect": {
		AllowedChoices: []string{},
		ConvertedName:  "NoAuthRedirect",
		Description: `If set, instruct the server to return the OIDC auth url in authURL instead of
performing an HTTP redirection.`,
		Exposed: true,
		Name:    "noAuthRedirect",
		Type:    "boolean",
	},
	"RedirectErrorURL": {
		AllowedChoices: []string{},
		ConvertedName:  "RedirectErrorURL",
		Description:    `OIDC redirect url in case of error.`,
		Exposed:        true,
		Name:           "redirectErrorURL",
		Type:           "string",
	},
	"RedirectURL": {
		AllowedChoices: []string{},
		ConvertedName:  "RedirectURL",
		Description:    `OIDC redirect url.`,
		Exposed:        true,
		Name:           "redirectURL",
		Type:           "string",
	},
	"RelayState": {
		AllowedChoices: []string{},
		ConvertedName:  "RelayState",
		Description:    `OIDC ceremony state.`,
		Exposed:        true,
		Name:           "relayState",
		Type:           "string",
	},
}

// IssueSAMLLowerCaseAttributesMap represents the map of attribute for IssueSAML.
var IssueSAMLLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"samlresponse": {
		AllowedChoices: []string{},
		ConvertedName:  "SAMLResponse",
		Description:    `OIDC redirect url.`,
		Exposed:        true,
		Name:           "SAMLResponse",
		Type:           "string",
	},
	"authurl": {
		AllowedChoices: []string{},
		ConvertedName:  "AuthURL",
		Description:    `Contains the auth URL is noAuthRedirect is set to true.`,
		Exposed:        true,
		Name:           "authURL",
		ReadOnly:       true,
		Type:           "string",
	},
	"noauthredirect": {
		AllowedChoices: []string{},
		ConvertedName:  "NoAuthRedirect",
		Description: `If set, instruct the server to return the OIDC auth url in authURL instead of
performing an HTTP redirection.`,
		Exposed: true,
		Name:    "noAuthRedirect",
		Type:    "boolean",
	},
	"redirecterrorurl": {
		AllowedChoices: []string{},
		ConvertedName:  "RedirectErrorURL",
		Description:    `OIDC redirect url in case of error.`,
		Exposed:        true,
		Name:           "redirectErrorURL",
		Type:           "string",
	},
	"redirecturl": {
		AllowedChoices: []string{},
		ConvertedName:  "RedirectURL",
		Description:    `OIDC redirect url.`,
		Exposed:        true,
		Name:           "redirectURL",
		Type:           "string",
	},
	"relaystate": {
		AllowedChoices: []string{},
		ConvertedName:  "RelayState",
		Description:    `OIDC ceremony state.`,
		Exposed:        true,
		Name:           "relayState",
		Type:           "string",
	},
}

type mongoAttributesIssueSAML struct {
}
