// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// OAuth2SourceProviderValue represents the possible values for attribute "provider".
type OAuth2SourceProviderValue string

const (
	// OAuth2SourceProviderGithub represents the value Github.
	OAuth2SourceProviderGithub OAuth2SourceProviderValue = "Github"

	// OAuth2SourceProviderGitlab represents the value Gitlab.
	OAuth2SourceProviderGitlab OAuth2SourceProviderValue = "Gitlab"
)

// OAuth2SourceIdentity represents the Identity of the object.
var OAuth2SourceIdentity = elemental.Identity{
	Name:     "oauth2source",
	Category: "oauth2sources",
	Package:  "a3s",
	Private:  false,
}

// OAuth2SourcesList represents a list of OAuth2Sources
type OAuth2SourcesList []*OAuth2Source

// Identity returns the identity of the objects in the list.
func (o OAuth2SourcesList) Identity() elemental.Identity {

	return OAuth2SourceIdentity
}

// Copy returns a pointer to a copy the OAuth2SourcesList.
func (o OAuth2SourcesList) Copy() elemental.Identifiables {

	out := append(OAuth2SourcesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the OAuth2SourcesList.
func (o OAuth2SourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(OAuth2SourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*OAuth2Source))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o OAuth2SourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o OAuth2SourcesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the OAuth2SourcesList converted to SparseOAuth2SourcesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o OAuth2SourcesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseOAuth2SourcesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseOAuth2Source)
	}

	return out
}

// Version returns the version of the content.
func (o OAuth2SourcesList) Version() int {

	return 1
}

// OAuth2Source represents the model of a oauth2source
type OAuth2Source struct {
	// The Certificate authority to use to validate the authenticity of the OAuth
	// server. If left empty, the system trust store will be used. In most of the
	// cases, you don't need to set this.
	CA string `json:"CA" msgpack:"CA" bson:"ca" mapstructure:"CA,omitempty"`

	// ID is the identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Unique client ID.
	ClientID string `json:"clientID" msgpack:"clientID" bson:"clientid" mapstructure:"clientID,omitempty"`

	// Client secret associated with the client ID.
	ClientSecret string `json:"clientSecret" msgpack:"clientSecret" bson:"clientsecret" mapstructure:"clientSecret,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Select a supported OAuth2 provider.
	Provider OAuth2SourceProviderValue `json:"provider" msgpack:"provider" bson:"provider" mapstructure:"provider,omitempty"`

	// List of scopes to request.
	Scopes []string `json:"scopes" msgpack:"scopes" bson:"scopes" mapstructure:"scopes,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewOAuth2Source returns a new *OAuth2Source
func NewOAuth2Source() *OAuth2Source {

	return &OAuth2Source{
		ModelVersion: 1,
		Scopes:       []string{},
	}
}

// Identity returns the Identity of the object.
func (o *OAuth2Source) Identity() elemental.Identity {

	return OAuth2SourceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *OAuth2Source) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *OAuth2Source) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OAuth2Source) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesOAuth2Source{}

	s.CA = o.CA
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.ClientID = o.ClientID
	s.ClientSecret = o.ClientSecret
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Modifier = o.Modifier
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.Provider = o.Provider
	s.Scopes = o.Scopes
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OAuth2Source) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesOAuth2Source{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CA = s.CA
	o.ID = s.ID.Hex()
	o.ClientID = s.ClientID
	o.ClientSecret = s.ClientSecret
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Modifier = s.Modifier
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.Provider = s.Provider
	o.Scopes = s.Scopes
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *OAuth2Source) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *OAuth2Source) BleveType() string {

	return "oauth2source"
}

// DefaultOrder returns the list of default ordering fields.
func (o *OAuth2Source) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *OAuth2Source) Doc() string {

	return `An Oauth Auth source can be used to issue tokens based on supported OAuth2
providers. accounts.`
}

func (o *OAuth2Source) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetID returns the ID of the receiver.
func (o *OAuth2Source) GetID() string {

	return o.ID
}

// SetID sets the property ID of the receiver using the given value.
func (o *OAuth2Source) SetID(ID string) {

	o.ID = ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *OAuth2Source) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *OAuth2Source) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *OAuth2Source) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *OAuth2Source) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *OAuth2Source) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *OAuth2Source) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *OAuth2Source) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *OAuth2Source) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *OAuth2Source) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *OAuth2Source) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *OAuth2Source) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *OAuth2Source) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *OAuth2Source) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *OAuth2Source) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *OAuth2Source) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseOAuth2Source{
			CA:           &o.CA,
			ID:           &o.ID,
			ClientID:     &o.ClientID,
			ClientSecret: &o.ClientSecret,
			CreateTime:   &o.CreateTime,
			Description:  &o.Description,
			ImportHash:   &o.ImportHash,
			ImportLabel:  &o.ImportLabel,
			Modifier:     o.Modifier,
			Name:         &o.Name,
			Namespace:    &o.Namespace,
			Provider:     &o.Provider,
			Scopes:       &o.Scopes,
			UpdateTime:   &o.UpdateTime,
			ZHash:        &o.ZHash,
			Zone:         &o.Zone,
		}
	}

	sp := &SparseOAuth2Source{}
	for _, f := range fields {
		switch f {
		case "CA":
			sp.CA = &(o.CA)
		case "ID":
			sp.ID = &(o.ID)
		case "clientID":
			sp.ClientID = &(o.ClientID)
		case "clientSecret":
			sp.ClientSecret = &(o.ClientSecret)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "modifier":
			sp.Modifier = o.Modifier
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "provider":
			sp.Provider = &(o.Provider)
		case "scopes":
			sp.Scopes = &(o.Scopes)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *OAuth2Source) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.EncryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'ClientSecret' for 'OAuth2Source' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *OAuth2Source) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.DecryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'ClientSecret' for 'OAuth2Source' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// Patch apply the non nil value of a *SparseOAuth2Source to the object.
func (o *OAuth2Source) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseOAuth2Source)
	if so.CA != nil {
		o.CA = *so.CA
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.ClientID != nil {
		o.ClientID = *so.ClientID
	}
	if so.ClientSecret != nil {
		o.ClientSecret = *so.ClientSecret
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Modifier != nil {
		o.Modifier = so.Modifier
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Provider != nil {
		o.Provider = *so.Provider
	}
	if so.Scopes != nil {
		o.Scopes = *so.Scopes
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the OAuth2Source.
func (o *OAuth2Source) DeepCopy() *OAuth2Source {

	if o == nil {
		return nil
	}

	out := &OAuth2Source{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *OAuth2Source.
func (o *OAuth2Source) DeepCopyInto(out *OAuth2Source) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy OAuth2Source: %s", err))
	}

	*out = *target.(*OAuth2Source)
}

// Validate valides the current information stored into the structure.
func (o *OAuth2Source) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidatePEM("CA", o.CA); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("clientID", o.ClientID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("clientSecret", o.ClientSecret); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Modifier != nil {
		elemental.ResetDefaultForZeroValues(o.Modifier)
		if err := o.Modifier.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("provider", string(o.Provider)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("provider", string(o.Provider), []string{"Github", "Gitlab"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*OAuth2Source) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := OAuth2SourceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return OAuth2SourceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*OAuth2Source) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return OAuth2SourceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *OAuth2Source) ValueForAttribute(name string) any {

	switch name {
	case "CA":
		return o.CA
	case "ID":
		return o.ID
	case "clientID":
		return o.ClientID
	case "clientSecret":
		return o.ClientSecret
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "modifier":
		return o.Modifier
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "provider":
		return o.Provider
	case "scopes":
		return o.Scopes
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// OAuth2SourceAttributesMap represents the map of attribute for OAuth2Source.
var OAuth2SourceAttributesMap = map[string]elemental.AttributeSpecification{
	"CA": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description: `The Certificate authority to use to validate the authenticity of the OAuth
server. If left empty, the system trust store will be used. In most of the
cases, you don't need to set this.`,
		Exposed: true,
		Name:    "CA",
		Stored:  true,
		Type:    "string",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ClientID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description:    `Unique client ID.`,
		Exposed:        true,
		Name:           "clientID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ClientSecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description:    `Client secret associated with the client ID.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "clientSecret",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Provider": {
		AllowedChoices: []string{"Github", "Gitlab"},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		Description:    `Select a supported OAuth2 provider.`,
		Exposed:        true,
		Name:           "provider",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Scopes": {
		AllowedChoices: []string{},
		BSONFieldName:  "scopes",
		ConvertedName:  "Scopes",
		Description:    `List of scopes to request.`,
		Exposed:        true,
		Name:           "scopes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// OAuth2SourceLowerCaseAttributesMap represents the map of attribute for OAuth2Source.
var OAuth2SourceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"ca": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description: `The Certificate authority to use to validate the authenticity of the OAuth
server. If left empty, the system trust store will be used. In most of the
cases, you don't need to set this.`,
		Exposed: true,
		Name:    "CA",
		Stored:  true,
		Type:    "string",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"clientid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description:    `Unique client ID.`,
		Exposed:        true,
		Name:           "clientID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"clientsecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description:    `Client secret associated with the client ID.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "clientSecret",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"provider": {
		AllowedChoices: []string{"Github", "Gitlab"},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		Description:    `Select a supported OAuth2 provider.`,
		Exposed:        true,
		Name:           "provider",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"scopes": {
		AllowedChoices: []string{},
		BSONFieldName:  "scopes",
		ConvertedName:  "Scopes",
		Description:    `List of scopes to request.`,
		Exposed:        true,
		Name:           "scopes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseOAuth2SourcesList represents a list of SparseOAuth2Sources
type SparseOAuth2SourcesList []*SparseOAuth2Source

// Identity returns the identity of the objects in the list.
func (o SparseOAuth2SourcesList) Identity() elemental.Identity {

	return OAuth2SourceIdentity
}

// Copy returns a pointer to a copy the SparseOAuth2SourcesList.
func (o SparseOAuth2SourcesList) Copy() elemental.Identifiables {

	copy := append(SparseOAuth2SourcesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseOAuth2SourcesList.
func (o SparseOAuth2SourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseOAuth2SourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseOAuth2Source))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseOAuth2SourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseOAuth2SourcesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseOAuth2SourcesList converted to OAuth2SourcesList.
func (o SparseOAuth2SourcesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseOAuth2SourcesList) Version() int {

	return 1
}

// SparseOAuth2Source represents the sparse version of a oauth2source.
type SparseOAuth2Source struct {
	// The Certificate authority to use to validate the authenticity of the OAuth
	// server. If left empty, the system trust store will be used. In most of the
	// cases, you don't need to set this.
	CA *string `json:"CA,omitempty" msgpack:"CA,omitempty" bson:"ca,omitempty" mapstructure:"CA,omitempty"`

	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Unique client ID.
	ClientID *string `json:"clientID,omitempty" msgpack:"clientID,omitempty" bson:"clientid,omitempty" mapstructure:"clientID,omitempty"`

	// Client secret associated with the client ID.
	ClientSecret *string `json:"clientSecret,omitempty" msgpack:"clientSecret,omitempty" bson:"clientsecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Select a supported OAuth2 provider.
	Provider *OAuth2SourceProviderValue `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"provider,omitempty" mapstructure:"provider,omitempty"`

	// List of scopes to request.
	Scopes *[]string `json:"scopes,omitempty" msgpack:"scopes,omitempty" bson:"scopes,omitempty" mapstructure:"scopes,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseOAuth2Source returns a new  SparseOAuth2Source.
func NewSparseOAuth2Source() *SparseOAuth2Source {
	return &SparseOAuth2Source{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseOAuth2Source) Identity() elemental.Identity {

	return OAuth2SourceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseOAuth2Source) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseOAuth2Source) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOAuth2Source) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseOAuth2Source{}

	if o.CA != nil {
		s.CA = o.CA
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.ClientID != nil {
		s.ClientID = o.ClientID
	}
	if o.ClientSecret != nil {
		s.ClientSecret = o.ClientSecret
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Modifier != nil {
		s.Modifier = o.Modifier
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Provider != nil {
		s.Provider = o.Provider
	}
	if o.Scopes != nil {
		s.Scopes = o.Scopes
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOAuth2Source) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseOAuth2Source{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.CA != nil {
		o.CA = s.CA
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.ClientID != nil {
		o.ClientID = s.ClientID
	}
	if s.ClientSecret != nil {
		o.ClientSecret = s.ClientSecret
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Modifier != nil {
		o.Modifier = s.Modifier
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Provider != nil {
		o.Provider = s.Provider
	}
	if s.Scopes != nil {
		o.Scopes = s.Scopes
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseOAuth2Source) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseOAuth2Source) ToPlain() elemental.PlainIdentifiable {

	out := NewOAuth2Source()
	if o.CA != nil {
		out.CA = *o.CA
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.ClientID != nil {
		out.ClientID = *o.ClientID
	}
	if o.ClientSecret != nil {
		out.ClientSecret = *o.ClientSecret
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Modifier != nil {
		out.Modifier = o.Modifier
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Provider != nil {
		out.Provider = *o.Provider
	}
	if o.Scopes != nil {
		out.Scopes = *o.Scopes
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparseOAuth2Source) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.ClientSecret, err = encrypter.EncryptString(*o.ClientSecret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'ClientSecret' for 'SparseOAuth2Source' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparseOAuth2Source) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.ClientSecret, err = encrypter.DecryptString(*o.ClientSecret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'ClientSecret' for 'SparseOAuth2Source' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// GetID returns the ID of the receiver.
func (o *SparseOAuth2Source) GetID() (out string) {

	if o.ID == nil {
		return
	}

	return *o.ID
}

// SetID sets the property ID of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetID(ID string) {

	o.ID = &ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseOAuth2Source) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseOAuth2Source) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseOAuth2Source) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseOAuth2Source) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseOAuth2Source) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseOAuth2Source) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseOAuth2Source) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseOAuth2Source) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseOAuth2Source.
func (o *SparseOAuth2Source) DeepCopy() *SparseOAuth2Source {

	if o == nil {
		return nil
	}

	out := &SparseOAuth2Source{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseOAuth2Source.
func (o *SparseOAuth2Source) DeepCopyInto(out *SparseOAuth2Source) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseOAuth2Source: %s", err))
	}

	*out = *target.(*SparseOAuth2Source)
}

type mongoAttributesOAuth2Source struct {
	CA           string                    `bson:"ca"`
	ID           bson.ObjectId             `bson:"_id,omitempty"`
	ClientID     string                    `bson:"clientid"`
	ClientSecret string                    `bson:"clientsecret"`
	CreateTime   time.Time                 `bson:"createtime"`
	Description  string                    `bson:"description"`
	ImportHash   string                    `bson:"importhash,omitempty"`
	ImportLabel  string                    `bson:"importlabel,omitempty"`
	Modifier     *IdentityModifier         `bson:"modifier,omitempty"`
	Name         string                    `bson:"name"`
	Namespace    string                    `bson:"namespace"`
	Provider     OAuth2SourceProviderValue `bson:"provider"`
	Scopes       []string                  `bson:"scopes"`
	UpdateTime   time.Time                 `bson:"updatetime"`
	ZHash        int                       `bson:"zhash"`
	Zone         int                       `bson:"zone"`
}
type mongoAttributesSparseOAuth2Source struct {
	CA           *string                    `bson:"ca,omitempty"`
	ID           bson.ObjectId              `bson:"_id,omitempty"`
	ClientID     *string                    `bson:"clientid,omitempty"`
	ClientSecret *string                    `bson:"clientsecret,omitempty"`
	CreateTime   *time.Time                 `bson:"createtime,omitempty"`
	Description  *string                    `bson:"description,omitempty"`
	ImportHash   *string                    `bson:"importhash,omitempty"`
	ImportLabel  *string                    `bson:"importlabel,omitempty"`
	Modifier     *IdentityModifier          `bson:"modifier,omitempty"`
	Name         *string                    `bson:"name,omitempty"`
	Namespace    *string                    `bson:"namespace,omitempty"`
	Provider     *OAuth2SourceProviderValue `bson:"provider,omitempty"`
	Scopes       *[]string                  `bson:"scopes,omitempty"`
	UpdateTime   *time.Time                 `bson:"updatetime,omitempty"`
	ZHash        *int                       `bson:"zhash,omitempty"`
	Zone         *int                       `bson:"zone,omitempty"`
}
