// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MTLSSourceClaimsRetrievalModeValue represents the possible values for attribute "claimsRetrievalMode".
type MTLSSourceClaimsRetrievalModeValue string

const (
	// MTLSSourceClaimsRetrievalModeEntra represents the value Entra.
	MTLSSourceClaimsRetrievalModeEntra MTLSSourceClaimsRetrievalModeValue = "Entra"

	// MTLSSourceClaimsRetrievalModeX509 represents the value X509.
	MTLSSourceClaimsRetrievalModeX509 MTLSSourceClaimsRetrievalModeValue = "X509"
)

// MTLSSourcePrincipalUserX509FieldValue represents the possible values for attribute "principalUserX509Field".
type MTLSSourcePrincipalUserX509FieldValue string

const (
	// MTLSSourcePrincipalUserX509FieldCommonName represents the value CommonName.
	MTLSSourcePrincipalUserX509FieldCommonName MTLSSourcePrincipalUserX509FieldValue = "CommonName"

	// MTLSSourcePrincipalUserX509FieldEmail represents the value Email.
	MTLSSourcePrincipalUserX509FieldEmail MTLSSourcePrincipalUserX509FieldValue = "Email"
)

// MTLSSourceIdentity represents the Identity of the object.
var MTLSSourceIdentity = elemental.Identity{
	Name:     "mtlssource",
	Category: "mtlssources",
	Package:  "a3s",
	Private:  false,
}

// MTLSSourcesList represents a list of MTLSSources
type MTLSSourcesList []*MTLSSource

// Identity returns the identity of the objects in the list.
func (o MTLSSourcesList) Identity() elemental.Identity {

	return MTLSSourceIdentity
}

// Copy returns a pointer to a copy the MTLSSourcesList.
func (o MTLSSourcesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the MTLSSourcesList.
func (o MTLSSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*MTLSSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o MTLSSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o MTLSSourcesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the MTLSSourcesList converted to SparseMTLSSourcesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o MTLSSourcesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseMTLSSourcesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseMTLSSource)
	}

	return out
}

// Version returns the version of the content.
func (o MTLSSourcesList) Version() int {

	return 1
}

// MTLSSource represents the model of a mtlssource
type MTLSSource struct {
	// The Certificate authority to use to validate user certificates in PEM format.
	CA string `json:"CA" msgpack:"CA" bson:"ca" mapstructure:"CA,omitempty"`

	// ID is the identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Defines if and how you want to enable auto login with client certificates.
	//
	// For Entra, you will need to set clientTenantID, clientID and
	// clientSecret.
	//
	// You will also need an Entra application that has the following permissions:
	//
	// - Directory.Read.All
	// - User.Read
	//
	// For now, only Entra is supported.
	ClaimsRetrievalMode MTLSSourceClaimsRetrievalModeValue `json:"claimsRetrievalMode,omitempty" msgpack:"claimsRetrievalMode,omitempty" bson:"claimsretrievalmode,omitempty" mapstructure:"claimsRetrievalMode,omitempty"`

	// The oauth clientID if any. This may be required for autologin, depending on the
	// mode.
	ClientID string `json:"clientID,omitempty" msgpack:"clientID,omitempty" bson:"clientid,omitempty" mapstructure:"clientID,omitempty"`

	// Client secret associated with the client ID. This may be required for autologin,
	// depending on the mode.
	ClientSecret string `json:"clientSecret" msgpack:"clientSecret" bson:"clientsecret" mapstructure:"clientSecret,omitempty"`

	// ID of the tenant for the identity provider, if any. This may be required for
	// autologin, depending on the mode.
	ClientTenantID string `json:"clientTenantID,omitempty" msgpack:"clientTenantID,omitempty" bson:"clienttenantid,omitempty" mapstructure:"clientTenantID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// The fingerprint of the CAs in the chain.
	Fingerprints []string `json:"fingerprints" msgpack:"fingerprints" bson:"fingerprints" mapstructure:"fingerprints,omitempty"`

	// A list of claims that will be filtered out from the identity token. A claim will
	// be ignored if it is prefixed with one of the items in the ignoredKeys list. This
	// runs before includedKeys computation.
	IgnoredKeys []string `json:"ignoredKeys" msgpack:"ignoredKeys" bson:"ignoredkeys" mapstructure:"ignoredKeys,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// A list of claims that defines which claims will be added to the identity
	// token. A claim will be included if it is prefixed with one of the items in the
	// includedKeys list. This runs after ignoreddKeys computation.
	IncludedKeys []string `json:"includedKeys" msgpack:"includedKeys" bson:"includedkeys" mapstructure:"includedKeys,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The X.509 field to look for to extract the user principal name.
	PrincipalUserX509Field MTLSSourcePrincipalUserX509FieldValue `json:"principalUserX509Field" msgpack:"principalUserX509Field" bson:"principaluserx509field" mapstructure:"principalUserX509Field,omitempty"`

	// Value of the CAs X.509 SubjectKeyIDs in the chain.
	SubjectKeyIDs []string `json:"subjectKeyIDs" msgpack:"subjectKeyIDs" bson:"subjectkeyids" mapstructure:"subjectKeyIDs,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMTLSSource returns a new *MTLSSource
func NewMTLSSource() *MTLSSource {

	return &MTLSSource{
		ModelVersion:           1,
		ClaimsRetrievalMode:    MTLSSourceClaimsRetrievalModeX509,
		Fingerprints:           []string{},
		IgnoredKeys:            []string{},
		IncludedKeys:           []string{},
		PrincipalUserX509Field: MTLSSourcePrincipalUserX509FieldEmail,
		SubjectKeyIDs:          []string{},
	}
}

// Identity returns the Identity of the object.
func (o *MTLSSource) Identity() elemental.Identity {

	return MTLSSourceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *MTLSSource) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *MTLSSource) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMTLSSource{}

	s.CA = o.CA
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.ClaimsRetrievalMode = o.ClaimsRetrievalMode
	s.ClientID = o.ClientID
	s.ClientSecret = o.ClientSecret
	s.ClientTenantID = o.ClientTenantID
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.Fingerprints = o.Fingerprints
	s.IgnoredKeys = o.IgnoredKeys
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.IncludedKeys = o.IncludedKeys
	s.Modifier = o.Modifier
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PrincipalUserX509Field = o.PrincipalUserX509Field
	s.SubjectKeyIDs = o.SubjectKeyIDs
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSource) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesMTLSSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CA = s.CA
	o.ID = s.ID.Hex()
	o.ClaimsRetrievalMode = s.ClaimsRetrievalMode
	o.ClientID = s.ClientID
	o.ClientSecret = s.ClientSecret
	o.ClientTenantID = s.ClientTenantID
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.Fingerprints = s.Fingerprints
	o.IgnoredKeys = s.IgnoredKeys
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.IncludedKeys = s.IncludedKeys
	o.Modifier = s.Modifier
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PrincipalUserX509Field = s.PrincipalUserX509Field
	o.SubjectKeyIDs = s.SubjectKeyIDs
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *MTLSSource) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *MTLSSource) BleveType() string {

	return "mtlssource"
}

// DefaultOrder returns the list of default ordering fields.
func (o *MTLSSource) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *MTLSSource) Doc() string {

	return `An MTLS Auth source can be used to issue tokens based on user certificates.`
}

func (o *MTLSSource) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetID returns the ID of the receiver.
func (o *MTLSSource) GetID() string {

	return o.ID
}

// SetID sets the property ID of the receiver using the given value.
func (o *MTLSSource) SetID(ID string) {

	o.ID = ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *MTLSSource) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *MTLSSource) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetIgnoredKeys returns the IgnoredKeys of the receiver.
func (o *MTLSSource) GetIgnoredKeys() []string {

	return o.IgnoredKeys
}

// GetImportHash returns the ImportHash of the receiver.
func (o *MTLSSource) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *MTLSSource) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *MTLSSource) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *MTLSSource) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetIncludedKeys returns the IncludedKeys of the receiver.
func (o *MTLSSource) GetIncludedKeys() []string {

	return o.IncludedKeys
}

// GetNamespace returns the Namespace of the receiver.
func (o *MTLSSource) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *MTLSSource) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *MTLSSource) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *MTLSSource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *MTLSSource) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *MTLSSource) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *MTLSSource) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *MTLSSource) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *MTLSSource) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseMTLSSource{
			CA:                     &o.CA,
			ID:                     &o.ID,
			ClaimsRetrievalMode:    &o.ClaimsRetrievalMode,
			ClientID:               &o.ClientID,
			ClientSecret:           &o.ClientSecret,
			ClientTenantID:         &o.ClientTenantID,
			CreateTime:             &o.CreateTime,
			Description:            &o.Description,
			Fingerprints:           &o.Fingerprints,
			IgnoredKeys:            &o.IgnoredKeys,
			ImportHash:             &o.ImportHash,
			ImportLabel:            &o.ImportLabel,
			IncludedKeys:           &o.IncludedKeys,
			Modifier:               o.Modifier,
			Name:                   &o.Name,
			Namespace:              &o.Namespace,
			PrincipalUserX509Field: &o.PrincipalUserX509Field,
			SubjectKeyIDs:          &o.SubjectKeyIDs,
			UpdateTime:             &o.UpdateTime,
			ZHash:                  &o.ZHash,
			Zone:                   &o.Zone,
		}
	}

	sp := &SparseMTLSSource{}
	for _, f := range fields {
		switch f {
		case "CA":
			sp.CA = &(o.CA)
		case "ID":
			sp.ID = &(o.ID)
		case "claimsRetrievalMode":
			sp.ClaimsRetrievalMode = &(o.ClaimsRetrievalMode)
		case "clientID":
			sp.ClientID = &(o.ClientID)
		case "clientSecret":
			sp.ClientSecret = &(o.ClientSecret)
		case "clientTenantID":
			sp.ClientTenantID = &(o.ClientTenantID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "fingerprints":
			sp.Fingerprints = &(o.Fingerprints)
		case "ignoredKeys":
			sp.IgnoredKeys = &(o.IgnoredKeys)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "includedKeys":
			sp.IncludedKeys = &(o.IncludedKeys)
		case "modifier":
			sp.Modifier = o.Modifier
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "principalUserX509Field":
			sp.PrincipalUserX509Field = &(o.PrincipalUserX509Field)
		case "subjectKeyIDs":
			sp.SubjectKeyIDs = &(o.SubjectKeyIDs)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseMTLSSource to the object.
func (o *MTLSSource) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseMTLSSource)
	if so.CA != nil {
		o.CA = *so.CA
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.ClaimsRetrievalMode != nil {
		o.ClaimsRetrievalMode = *so.ClaimsRetrievalMode
	}
	if so.ClientID != nil {
		o.ClientID = *so.ClientID
	}
	if so.ClientSecret != nil {
		o.ClientSecret = *so.ClientSecret
	}
	if so.ClientTenantID != nil {
		o.ClientTenantID = *so.ClientTenantID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Fingerprints != nil {
		o.Fingerprints = *so.Fingerprints
	}
	if so.IgnoredKeys != nil {
		o.IgnoredKeys = *so.IgnoredKeys
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.IncludedKeys != nil {
		o.IncludedKeys = *so.IncludedKeys
	}
	if so.Modifier != nil {
		o.Modifier = so.Modifier
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PrincipalUserX509Field != nil {
		o.PrincipalUserX509Field = *so.PrincipalUserX509Field
	}
	if so.SubjectKeyIDs != nil {
		o.SubjectKeyIDs = *so.SubjectKeyIDs
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *MTLSSource) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.EncryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'ClientSecret' for 'MTLSSource' (%s): %s", o.Identifier(), err)
	}

	if o.Modifier != nil {
		if err := o.Modifier.EncryptAttributes(encrypter); err != nil {
			return fmt.Errorf("unable to encrypt ref attribute 'Modifier' for 'MTLSSource' (%s): %s", o.Identifier(), err)
		}
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *MTLSSource) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.DecryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'ClientSecret' for 'MTLSSource' (%s): %s", o.Identifier(), err)
	}

	if o.Modifier != nil {
		if err := o.Modifier.DecryptAttributes(encrypter); err != nil {
			return fmt.Errorf("unable to decrypt ref attribute 'Modifier' for 'MTLSSource' (%s): %s", o.Identifier(), err)
		}
	}

	return nil
}

// DeepCopy returns a deep copy if the MTLSSource.
func (o *MTLSSource) DeepCopy() *MTLSSource {

	if o == nil {
		return nil
	}

	out := &MTLSSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MTLSSource.
func (o *MTLSSource) DeepCopyInto(out *MTLSSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MTLSSource: %s", err))
	}

	*out = *target.(*MTLSSource)
}

// Validate valides the current information stored into the structure.
func (o *MTLSSource) Validate() error {

	elemental.ResetDefaultForZeroValues(o)

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("CA", o.CA); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateCert("CA", o.CA); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("claimsRetrievalMode", string(o.ClaimsRetrievalMode), []string{"Entra", "X509"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateKeys("ignoredKeys", o.IgnoredKeys); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateKeys("includedKeys", o.IncludedKeys); err != nil {
		errors = errors.Append(err)
	}

	if o.Modifier != nil {
		if err := o.Modifier.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("principalUserX509Field", string(o.PrincipalUserX509Field), []string{"CommonName", "Email"}, false); err != nil {
		errors = errors.Append(err)
	}

	// Custom object validation.
	if err := ValidateMTLSSource(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MTLSSource) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MTLSSourceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MTLSSourceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MTLSSource) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MTLSSourceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MTLSSource) ValueForAttribute(name string) any {

	switch name {
	case "CA":
		return o.CA
	case "ID":
		return o.ID
	case "claimsRetrievalMode":
		return o.ClaimsRetrievalMode
	case "clientID":
		return o.ClientID
	case "clientSecret":
		return o.ClientSecret
	case "clientTenantID":
		return o.ClientTenantID
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "fingerprints":
		return o.Fingerprints
	case "ignoredKeys":
		return o.IgnoredKeys
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "includedKeys":
		return o.IncludedKeys
	case "modifier":
		return o.Modifier
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "principalUserX509Field":
		return o.PrincipalUserX509Field
	case "subjectKeyIDs":
		return o.SubjectKeyIDs
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// MTLSSourceAttributesMap represents the map of attribute for MTLSSource.
var MTLSSourceAttributesMap = map[string]elemental.AttributeSpecification{
	"CA": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description:    `The Certificate authority to use to validate user certificates in PEM format.`,
		Exposed:        true,
		Name:           "CA",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ClaimsRetrievalMode": {
		AllowedChoices: []string{"Entra", "X509"},
		BSONFieldName:  "claimsretrievalmode",
		ConvertedName:  "ClaimsRetrievalMode",
		DefaultValue:   MTLSSourceClaimsRetrievalModeX509,
		Description: `Defines if and how you want to enable auto login with client certificates.

For Entra, you will need to set clientTenantID, clientID and
clientSecret.

You will also need an Entra application that has the following permissions:

- Directory.Read.All
- User.Read

For now, only Entra is supported.`,
		Exposed: true,
		Name:    "claimsRetrievalMode",
		Stored:  true,
		Type:    "enum",
	},
	"ClientID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description: `The oauth clientID if any. This may be required for autologin, depending on the
mode.`,
		Exposed: true,
		Name:    "clientID",
		Stored:  true,
		Type:    "string",
	},
	"ClientSecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description: `Client secret associated with the client ID. This may be required for autologin,
depending on the mode.`,
		Encrypted: true,
		Exposed:   true,
		Name:      "clientSecret",
		Required:  true,
		Secret:    true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"ClientTenantID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clienttenantid",
		ConvertedName:  "ClientTenantID",
		Description: `ID of the tenant for the identity provider, if any. This may be required for
autologin, depending on the mode.`,
		Exposed: true,
		Name:    "clientTenantID",
		Stored:  true,
		Type:    "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Fingerprints": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "fingerprints",
		ConvertedName:  "Fingerprints",
		Description:    `The fingerprint of the CAs in the chain.`,
		Exposed:        true,
		Name:           "fingerprints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"IgnoredKeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignoredkeys",
		ConvertedName:  "IgnoredKeys",
		Description: `A list of claims that will be filtered out from the identity token. A claim will
be ignored if it is prefixed with one of the items in the ignoredKeys list. This
runs before includedKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "ignoredKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"IncludedKeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "includedkeys",
		ConvertedName:  "IncludedKeys",
		Description: `A list of claims that defines which claims will be added to the identity
token. A claim will be included if it is prefixed with one of the items in the
includedKeys list. This runs after ignoreddKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "includedKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PrincipalUserX509Field": {
		AllowedChoices: []string{"CommonName", "Email"},
		BSONFieldName:  "principaluserx509field",
		ConvertedName:  "PrincipalUserX509Field",
		DefaultValue:   MTLSSourcePrincipalUserX509FieldEmail,
		Description:    `The X.509 field to look for to extract the user principal name.`,
		Exposed:        true,
		Name:           "principalUserX509Field",
		Stored:         true,
		Type:           "enum",
	},
	"SubjectKeyIDs": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subjectkeyids",
		ConvertedName:  "SubjectKeyIDs",
		Description:    `Value of the CAs X.509 SubjectKeyIDs in the chain.`,
		Exposed:        true,
		Name:           "subjectKeyIDs",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// MTLSSourceLowerCaseAttributesMap represents the map of attribute for MTLSSource.
var MTLSSourceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"ca": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description:    `The Certificate authority to use to validate user certificates in PEM format.`,
		Exposed:        true,
		Name:           "CA",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"claimsretrievalmode": {
		AllowedChoices: []string{"Entra", "X509"},
		BSONFieldName:  "claimsretrievalmode",
		ConvertedName:  "ClaimsRetrievalMode",
		DefaultValue:   MTLSSourceClaimsRetrievalModeX509,
		Description: `Defines if and how you want to enable auto login with client certificates.

For Entra, you will need to set clientTenantID, clientID and
clientSecret.

You will also need an Entra application that has the following permissions:

- Directory.Read.All
- User.Read

For now, only Entra is supported.`,
		Exposed: true,
		Name:    "claimsRetrievalMode",
		Stored:  true,
		Type:    "enum",
	},
	"clientid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description: `The oauth clientID if any. This may be required for autologin, depending on the
mode.`,
		Exposed: true,
		Name:    "clientID",
		Stored:  true,
		Type:    "string",
	},
	"clientsecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description: `Client secret associated with the client ID. This may be required for autologin,
depending on the mode.`,
		Encrypted: true,
		Exposed:   true,
		Name:      "clientSecret",
		Required:  true,
		Secret:    true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"clienttenantid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clienttenantid",
		ConvertedName:  "ClientTenantID",
		Description: `ID of the tenant for the identity provider, if any. This may be required for
autologin, depending on the mode.`,
		Exposed: true,
		Name:    "clientTenantID",
		Stored:  true,
		Type:    "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the object.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"fingerprints": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "fingerprints",
		ConvertedName:  "Fingerprints",
		Description:    `The fingerprint of the CAs in the chain.`,
		Exposed:        true,
		Name:           "fingerprints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ignoredkeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignoredkeys",
		ConvertedName:  "IgnoredKeys",
		Description: `A list of claims that will be filtered out from the identity token. A claim will
be ignored if it is prefixed with one of the items in the ignoredKeys list. This
runs before includedKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "ignoredKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"includedkeys": {
		AllowedChoices: []string{},
		BSONFieldName:  "includedkeys",
		ConvertedName:  "IncludedKeys",
		Description: `A list of claims that defines which claims will be added to the identity
token. A claim will be included if it is prefixed with one of the items in the
includedKeys list. This runs after ignoreddKeys computation.`,
		Exposed: true,
		Getter:  true,
		Name:    "includedKeys",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"modifier": {
		AllowedChoices: []string{},
		BSONFieldName:  "modifier",
		ConvertedName:  "Modifier",
		Description: `Contains optional information about a remote service that can be used to modify
the claims that are about to be delivered using this authentication source.`,
		Exposed: true,
		Name:    "modifier",
		Stored:  true,
		SubType: "identitymodifier",
		Type:    "ref",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"principaluserx509field": {
		AllowedChoices: []string{"CommonName", "Email"},
		BSONFieldName:  "principaluserx509field",
		ConvertedName:  "PrincipalUserX509Field",
		DefaultValue:   MTLSSourcePrincipalUserX509FieldEmail,
		Description:    `The X.509 field to look for to extract the user principal name.`,
		Exposed:        true,
		Name:           "principalUserX509Field",
		Stored:         true,
		Type:           "enum",
	},
	"subjectkeyids": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subjectkeyids",
		ConvertedName:  "SubjectKeyIDs",
		Description:    `Value of the CAs X.509 SubjectKeyIDs in the chain.`,
		Exposed:        true,
		Name:           "subjectKeyIDs",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseMTLSSourcesList represents a list of SparseMTLSSources
type SparseMTLSSourcesList []*SparseMTLSSource

// Identity returns the identity of the objects in the list.
func (o SparseMTLSSourcesList) Identity() elemental.Identity {

	return MTLSSourceIdentity
}

// Copy returns a pointer to a copy the SparseMTLSSourcesList.
func (o SparseMTLSSourcesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseMTLSSourcesList.
func (o SparseMTLSSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseMTLSSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseMTLSSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseMTLSSourcesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseMTLSSourcesList converted to MTLSSourcesList.
func (o SparseMTLSSourcesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseMTLSSourcesList) Version() int {

	return 1
}

// SparseMTLSSource represents the sparse version of a mtlssource.
type SparseMTLSSource struct {
	// The Certificate authority to use to validate user certificates in PEM format.
	CA *string `json:"CA,omitempty" msgpack:"CA,omitempty" bson:"ca,omitempty" mapstructure:"CA,omitempty"`

	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Defines if and how you want to enable auto login with client certificates.
	//
	// For Entra, you will need to set clientTenantID, clientID and
	// clientSecret.
	//
	// You will also need an Entra application that has the following permissions:
	//
	// - Directory.Read.All
	// - User.Read
	//
	// For now, only Entra is supported.
	ClaimsRetrievalMode *MTLSSourceClaimsRetrievalModeValue `json:"claimsRetrievalMode,omitempty" msgpack:"claimsRetrievalMode,omitempty" bson:"claimsretrievalmode,omitempty" mapstructure:"claimsRetrievalMode,omitempty"`

	// The oauth clientID if any. This may be required for autologin, depending on the
	// mode.
	ClientID *string `json:"clientID,omitempty" msgpack:"clientID,omitempty" bson:"clientid,omitempty" mapstructure:"clientID,omitempty"`

	// Client secret associated with the client ID. This may be required for autologin,
	// depending on the mode.
	ClientSecret *string `json:"clientSecret,omitempty" msgpack:"clientSecret,omitempty" bson:"clientsecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// ID of the tenant for the identity provider, if any. This may be required for
	// autologin, depending on the mode.
	ClientTenantID *string `json:"clientTenantID,omitempty" msgpack:"clientTenantID,omitempty" bson:"clienttenantid,omitempty" mapstructure:"clientTenantID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The fingerprint of the CAs in the chain.
	Fingerprints *[]string `json:"fingerprints,omitempty" msgpack:"fingerprints,omitempty" bson:"fingerprints,omitempty" mapstructure:"fingerprints,omitempty"`

	// A list of claims that will be filtered out from the identity token. A claim will
	// be ignored if it is prefixed with one of the items in the ignoredKeys list. This
	// runs before includedKeys computation.
	IgnoredKeys *[]string `json:"ignoredKeys,omitempty" msgpack:"ignoredKeys,omitempty" bson:"ignoredkeys,omitempty" mapstructure:"ignoredKeys,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// A list of claims that defines which claims will be added to the identity
	// token. A claim will be included if it is prefixed with one of the items in the
	// includedKeys list. This runs after ignoreddKeys computation.
	IncludedKeys *[]string `json:"includedKeys,omitempty" msgpack:"includedKeys,omitempty" bson:"includedkeys,omitempty" mapstructure:"includedKeys,omitempty"`

	// Contains optional information about a remote service that can be used to modify
	// the claims that are about to be delivered using this authentication source.
	Modifier *IdentityModifier `json:"modifier,omitempty" msgpack:"modifier,omitempty" bson:"modifier,omitempty" mapstructure:"modifier,omitempty"`

	// The name of the source.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The X.509 field to look for to extract the user principal name.
	PrincipalUserX509Field *MTLSSourcePrincipalUserX509FieldValue `json:"principalUserX509Field,omitempty" msgpack:"principalUserX509Field,omitempty" bson:"principaluserx509field,omitempty" mapstructure:"principalUserX509Field,omitempty"`

	// Value of the CAs X.509 SubjectKeyIDs in the chain.
	SubjectKeyIDs *[]string `json:"subjectKeyIDs,omitempty" msgpack:"subjectKeyIDs,omitempty" bson:"subjectkeyids,omitempty" mapstructure:"subjectKeyIDs,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseMTLSSource returns a new  SparseMTLSSource.
func NewSparseMTLSSource() *SparseMTLSSource {
	return &SparseMTLSSource{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseMTLSSource) Identity() elemental.Identity {

	return MTLSSourceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseMTLSSource) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseMTLSSource) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseMTLSSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseMTLSSource{}

	if o.CA != nil {
		s.CA = o.CA
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.ClaimsRetrievalMode != nil {
		s.ClaimsRetrievalMode = o.ClaimsRetrievalMode
	}
	if o.ClientID != nil {
		s.ClientID = o.ClientID
	}
	if o.ClientSecret != nil {
		s.ClientSecret = o.ClientSecret
	}
	if o.ClientTenantID != nil {
		s.ClientTenantID = o.ClientTenantID
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.Fingerprints != nil {
		s.Fingerprints = o.Fingerprints
	}
	if o.IgnoredKeys != nil {
		s.IgnoredKeys = o.IgnoredKeys
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.IncludedKeys != nil {
		s.IncludedKeys = o.IncludedKeys
	}
	if o.Modifier != nil {
		s.Modifier = o.Modifier
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PrincipalUserX509Field != nil {
		s.PrincipalUserX509Field = o.PrincipalUserX509Field
	}
	if o.SubjectKeyIDs != nil {
		s.SubjectKeyIDs = o.SubjectKeyIDs
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseMTLSSource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseMTLSSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.CA != nil {
		o.CA = s.CA
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.ClaimsRetrievalMode != nil {
		o.ClaimsRetrievalMode = s.ClaimsRetrievalMode
	}
	if s.ClientID != nil {
		o.ClientID = s.ClientID
	}
	if s.ClientSecret != nil {
		o.ClientSecret = s.ClientSecret
	}
	if s.ClientTenantID != nil {
		o.ClientTenantID = s.ClientTenantID
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.Fingerprints != nil {
		o.Fingerprints = s.Fingerprints
	}
	if s.IgnoredKeys != nil {
		o.IgnoredKeys = s.IgnoredKeys
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.IncludedKeys != nil {
		o.IncludedKeys = s.IncludedKeys
	}
	if s.Modifier != nil {
		o.Modifier = s.Modifier
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PrincipalUserX509Field != nil {
		o.PrincipalUserX509Field = s.PrincipalUserX509Field
	}
	if s.SubjectKeyIDs != nil {
		o.SubjectKeyIDs = s.SubjectKeyIDs
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseMTLSSource) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseMTLSSource) ToPlain() elemental.PlainIdentifiable {

	out := NewMTLSSource()
	if o.CA != nil {
		out.CA = *o.CA
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.ClaimsRetrievalMode != nil {
		out.ClaimsRetrievalMode = *o.ClaimsRetrievalMode
	}
	if o.ClientID != nil {
		out.ClientID = *o.ClientID
	}
	if o.ClientSecret != nil {
		out.ClientSecret = *o.ClientSecret
	}
	if o.ClientTenantID != nil {
		out.ClientTenantID = *o.ClientTenantID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Fingerprints != nil {
		out.Fingerprints = *o.Fingerprints
	}
	if o.IgnoredKeys != nil {
		out.IgnoredKeys = *o.IgnoredKeys
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.IncludedKeys != nil {
		out.IncludedKeys = *o.IncludedKeys
	}
	if o.Modifier != nil {
		out.Modifier = o.Modifier
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PrincipalUserX509Field != nil {
		out.PrincipalUserX509Field = *o.PrincipalUserX509Field
	}
	if o.SubjectKeyIDs != nil {
		out.SubjectKeyIDs = *o.SubjectKeyIDs
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparseMTLSSource) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.ClientSecret, err = encrypter.EncryptString(*o.ClientSecret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'ClientSecret' for 'SparseMTLSSource' (%s): %s", o.Identifier(), err)
	}

	if o.Modifier != nil {
		if err := o.Modifier.EncryptAttributes(encrypter); err != nil {
			return fmt.Errorf("unable to encrypt ref attribute 'Modifier' for 'MTLSSource' (%s): %s", o.Identifier(), err)
		}
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparseMTLSSource) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.ClientSecret, err = encrypter.DecryptString(*o.ClientSecret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'ClientSecret' for 'SparseMTLSSource' (%s): %s", o.Identifier(), err)
	}

	if o.Modifier != nil {
		if err := o.Modifier.DecryptAttributes(encrypter); err != nil {
			return fmt.Errorf("unable to decrypt ref attribute 'Modifier' for 'MTLSSource' (%s): %s", o.Identifier(), err)
		}
	}

	return nil
}

// GetID returns the ID of the receiver.
func (o *SparseMTLSSource) GetID() (out string) {

	if o.ID == nil {
		return
	}

	return *o.ID
}

// SetID sets the property ID of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetID(ID string) {

	o.ID = &ID
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseMTLSSource) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetIgnoredKeys returns the IgnoredKeys of the receiver.
func (o *SparseMTLSSource) GetIgnoredKeys() (out []string) {

	if o.IgnoredKeys == nil {
		return
	}

	return *o.IgnoredKeys
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseMTLSSource) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseMTLSSource) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetIncludedKeys returns the IncludedKeys of the receiver.
func (o *SparseMTLSSource) GetIncludedKeys() (out []string) {

	if o.IncludedKeys == nil {
		return
	}

	return *o.IncludedKeys
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseMTLSSource) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseMTLSSource) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseMTLSSource) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseMTLSSource) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseMTLSSource) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseMTLSSource.
func (o *SparseMTLSSource) DeepCopy() *SparseMTLSSource {

	if o == nil {
		return nil
	}

	out := &SparseMTLSSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseMTLSSource.
func (o *SparseMTLSSource) DeepCopyInto(out *SparseMTLSSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseMTLSSource: %s", err))
	}

	*out = *target.(*SparseMTLSSource)
}

type mongoAttributesMTLSSource struct {
	CA                     string                                `bson:"ca"`
	ID                     bson.ObjectId                         `bson:"_id,omitempty"`
	ClaimsRetrievalMode    MTLSSourceClaimsRetrievalModeValue    `bson:"claimsretrievalmode,omitempty"`
	ClientID               string                                `bson:"clientid,omitempty"`
	ClientSecret           string                                `bson:"clientsecret"`
	ClientTenantID         string                                `bson:"clienttenantid,omitempty"`
	CreateTime             time.Time                             `bson:"createtime"`
	Description            string                                `bson:"description"`
	Fingerprints           []string                              `bson:"fingerprints"`
	IgnoredKeys            []string                              `bson:"ignoredkeys"`
	ImportHash             string                                `bson:"importhash,omitempty"`
	ImportLabel            string                                `bson:"importlabel,omitempty"`
	IncludedKeys           []string                              `bson:"includedkeys"`
	Modifier               *IdentityModifier                     `bson:"modifier,omitempty"`
	Name                   string                                `bson:"name"`
	Namespace              string                                `bson:"namespace"`
	PrincipalUserX509Field MTLSSourcePrincipalUserX509FieldValue `bson:"principaluserx509field"`
	SubjectKeyIDs          []string                              `bson:"subjectkeyids"`
	UpdateTime             time.Time                             `bson:"updatetime"`
	ZHash                  int                                   `bson:"zhash"`
	Zone                   int                                   `bson:"zone"`
}
type mongoAttributesSparseMTLSSource struct {
	CA                     *string                                `bson:"ca,omitempty"`
	ID                     bson.ObjectId                          `bson:"_id,omitempty"`
	ClaimsRetrievalMode    *MTLSSourceClaimsRetrievalModeValue    `bson:"claimsretrievalmode,omitempty"`
	ClientID               *string                                `bson:"clientid,omitempty"`
	ClientSecret           *string                                `bson:"clientsecret,omitempty"`
	ClientTenantID         *string                                `bson:"clienttenantid,omitempty"`
	CreateTime             *time.Time                             `bson:"createtime,omitempty"`
	Description            *string                                `bson:"description,omitempty"`
	Fingerprints           *[]string                              `bson:"fingerprints,omitempty"`
	IgnoredKeys            *[]string                              `bson:"ignoredkeys,omitempty"`
	ImportHash             *string                                `bson:"importhash,omitempty"`
	ImportLabel            *string                                `bson:"importlabel,omitempty"`
	IncludedKeys           *[]string                              `bson:"includedkeys,omitempty"`
	Modifier               *IdentityModifier                      `bson:"modifier,omitempty"`
	Name                   *string                                `bson:"name,omitempty"`
	Namespace              *string                                `bson:"namespace,omitempty"`
	PrincipalUserX509Field *MTLSSourcePrincipalUserX509FieldValue `bson:"principaluserx509field,omitempty"`
	SubjectKeyIDs          *[]string                              `bson:"subjectkeyids,omitempty"`
	UpdateTime             *time.Time                             `bson:"updatetime,omitempty"`
	ZHash                  *int                                   `bson:"zhash,omitempty"`
	Zone                   *int                                   `bson:"zone,omitempty"`
}
