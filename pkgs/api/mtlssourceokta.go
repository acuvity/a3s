// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MTLSSourceOkta represents the model of a mtlssourceokta
type MTLSSourceOkta struct {
	// The Key ID associated to the private key.
	KID string `json:"KID" msgpack:"KID" bson:"kid" mapstructure:"KID,omitempty"`

	// The application client id.
	ClientID string `json:"clientID" msgpack:"clientID" bson:"clientid" mapstructure:"clientID,omitempty"`

	// Your custom okta domain.
	Domain string `json:"domain" msgpack:"domain" bson:"domain" mapstructure:"domain,omitempty"`

	// The Application private key.
	PrivateKey string `json:"privateKey" msgpack:"privateKey" bson:"privatekey" mapstructure:"privateKey,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMTLSSourceOkta returns a new *MTLSSourceOkta
func NewMTLSSourceOkta() *MTLSSourceOkta {

	return &MTLSSourceOkta{
		ModelVersion: 1,
	}
}
func (o *MTLSSourceOkta) Identity() elemental.Identity {

	return elemental.Identity{}
}
func (o *MTLSSourceOkta) Identifier() string {

	return ""
}
func (o *MTLSSourceOkta) SetIdentifier(id string) {
	panic("you cannot set identifier on a detached object")
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSourceOkta) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMTLSSourceOkta{}

	s.KID = o.KID
	s.ClientID = o.ClientID
	s.Domain = o.Domain
	s.PrivateKey = o.PrivateKey

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSourceOkta) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesMTLSSourceOkta{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.KID = s.KID
	o.ClientID = s.ClientID
	o.Domain = s.Domain
	o.PrivateKey = s.PrivateKey

	return nil
}

// Version returns the hardcoded version of the model.
func (o *MTLSSourceOkta) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *MTLSSourceOkta) BleveType() string {

	return "mtlssourceokta"
}

// Doc returns the documentation for the object
func (o *MTLSSourceOkta) Doc() string {

	return `Additional authentication information for MTLS source getting information from
Okta.`
}

// DeepCopy returns a deep copy if the MTLSSourceOkta.
func (o *MTLSSourceOkta) DeepCopy() *MTLSSourceOkta {

	if o == nil {
		return nil
	}

	out := &MTLSSourceOkta{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MTLSSourceOkta.
func (o *MTLSSourceOkta) DeepCopyInto(out *MTLSSourceOkta) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MTLSSourceOkta: %s", err))
	}

	*out = *target.(*MTLSSourceOkta)
}

// Validate valides the current information stored into the structure.
func (o *MTLSSourceOkta) Validate() error {

	elemental.ResetDefaultForZeroValues(o)

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("KID", o.KID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("clientID", o.ClientID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("domain", o.Domain); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MTLSSourceOkta) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MTLSSourceOktaAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MTLSSourceOktaLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MTLSSourceOkta) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MTLSSourceOktaAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MTLSSourceOkta) ValueForAttribute(name string) any {

	switch name {
	case "KID":
		return o.KID
	case "clientID":
		return o.ClientID
	case "domain":
		return o.Domain
	case "privateKey":
		return o.PrivateKey
	}

	return nil
}

// MTLSSourceOktaAttributesMap represents the map of attribute for MTLSSourceOkta.
var MTLSSourceOktaAttributesMap = map[string]elemental.AttributeSpecification{
	"KID": {
		AllowedChoices: []string{},
		BSONFieldName:  "kid",
		ConvertedName:  "KID",
		Description:    `The Key ID associated to the private key.`,
		Exposed:        true,
		Name:           "KID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ClientID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description:    `The application client id.`,
		Exposed:        true,
		Name:           "clientID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Domain": {
		AllowedChoices: []string{},
		BSONFieldName:  "domain",
		ConvertedName:  "Domain",
		Description:    `Your custom okta domain.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"PrivateKey": {
		AllowedChoices: []string{},
		BSONFieldName:  "privatekey",
		ConvertedName:  "PrivateKey",
		Description:    `The Application private key.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "privateKey",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// MTLSSourceOktaLowerCaseAttributesMap represents the map of attribute for MTLSSourceOkta.
var MTLSSourceOktaLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"kid": {
		AllowedChoices: []string{},
		BSONFieldName:  "kid",
		ConvertedName:  "KID",
		Description:    `The Key ID associated to the private key.`,
		Exposed:        true,
		Name:           "KID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"clientid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description:    `The application client id.`,
		Exposed:        true,
		Name:           "clientID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"domain": {
		AllowedChoices: []string{},
		BSONFieldName:  "domain",
		ConvertedName:  "Domain",
		Description:    `Your custom okta domain.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"privatekey": {
		AllowedChoices: []string{},
		BSONFieldName:  "privatekey",
		ConvertedName:  "PrivateKey",
		Description:    `The Application private key.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "privateKey",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

type mongoAttributesMTLSSourceOkta struct {
	KID        string `bson:"kid"`
	ClientID   string `bson:"clientid"`
	Domain     string `bson:"domain"`
	PrivateKey string `bson:"privatekey"`
}
