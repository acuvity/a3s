// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MTLSSourceEntra represents the model of a mtlssourceentra
type MTLSSourceEntra struct {
	// The oauth clientID if any. This may be required for autologin, depending on the
	// mode.
	ClientID string `json:"clientID,omitempty" msgpack:"clientID,omitempty" bson:"clientid,omitempty" mapstructure:"clientID,omitempty"`

	// Client secret associated with the client ID. This may be required for autologin,
	// depending on the mode.
	ClientSecret string `json:"clientSecret" msgpack:"clientSecret" bson:"clientsecret" mapstructure:"clientSecret,omitempty"`

	// ID of the tenant for the identity provider, if any. This may be required for
	// autologin, depending on the mode.
	ClientTenantID string `json:"clientTenantID,omitempty" msgpack:"clientTenantID,omitempty" bson:"clienttenantid,omitempty" mapstructure:"clientTenantID,omitempty"`

	// Stores the latest Entra Access Token.
	EntraAccessToken string `json:"-" msgpack:"-" bson:"entraaccesstoken,omitempty" mapstructure:"-,omitempty"`

	// Holds the secret used to authentify the calls from Entra.
	GraphEventSecret string `json:"-" msgpack:"-" bson:"grapheventsecret,omitempty" mapstructure:"-,omitempty"`

	// Enables background jobs to maintain subscriptions to Entra to be notified of
	// changes in groups, users and memmber assignation. This requires A3S to be
	// configured with an event hook endpoint.
	GraphEventsEnabled bool `json:"graphEventsEnabled" msgpack:"graphEventsEnabled" bson:"grapheventsenabled" mapstructure:"graphEventsEnabled,omitempty"`

	// Holds when the subscription will expire.
	GraphSubscriptionExpiration time.Time `json:"-" msgpack:"-" bson:"graphsubscriptionexpiration,omitempty" mapstructure:"-,omitempty"`

	// Holds the last subscription IDs to try to renew them.
	GraphSubscriptionIDs map[string]string `json:"-" msgpack:"-" bson:"graphsubscriptionids,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMTLSSourceEntra returns a new *MTLSSourceEntra
func NewMTLSSourceEntra() *MTLSSourceEntra {

	return &MTLSSourceEntra{
		ModelVersion:         1,
		GraphSubscriptionIDs: map[string]string{},
	}
}
func (o *MTLSSourceEntra) Identity() elemental.Identity {

	return elemental.Identity{}
}
func (o *MTLSSourceEntra) Identifier() string {

	return ""
}
func (o *MTLSSourceEntra) SetIdentifier(id string) {
	panic("you cannot set identifier on a detached object")
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSourceEntra) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMTLSSourceEntra{}

	s.ClientID = o.ClientID
	s.ClientSecret = o.ClientSecret
	s.ClientTenantID = o.ClientTenantID
	s.EntraAccessToken = o.EntraAccessToken
	s.GraphEventSecret = o.GraphEventSecret
	s.GraphEventsEnabled = o.GraphEventsEnabled
	s.GraphSubscriptionExpiration = o.GraphSubscriptionExpiration
	s.GraphSubscriptionIDs = o.GraphSubscriptionIDs

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MTLSSourceEntra) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesMTLSSourceEntra{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ClientID = s.ClientID
	o.ClientSecret = s.ClientSecret
	o.ClientTenantID = s.ClientTenantID
	o.EntraAccessToken = s.EntraAccessToken
	o.GraphEventSecret = s.GraphEventSecret
	o.GraphEventsEnabled = s.GraphEventsEnabled
	o.GraphSubscriptionExpiration = s.GraphSubscriptionExpiration
	o.GraphSubscriptionIDs = s.GraphSubscriptionIDs

	return nil
}

// Version returns the hardcoded version of the model.
func (o *MTLSSourceEntra) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *MTLSSourceEntra) BleveType() string {

	return "mtlssourceentra"
}

// Doc returns the documentation for the object
func (o *MTLSSourceEntra) Doc() string {

	return `Additional authentication information for MTLS source getting information from
Entra.

You will need to set clientTenantID, clientID and clientSecret.

You will also need an Entra application that has the following permissions:
Directory.Read.All and User.Read.`
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *MTLSSourceEntra) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.EncryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'ClientSecret' for 'MTLSSourceEntra' (%s): %w", o.Identifier(), err)
	}

	if o.EntraAccessToken, err = encrypter.EncryptString(o.EntraAccessToken); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'EntraAccessToken' for 'MTLSSourceEntra' (%s): %w", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *MTLSSourceEntra) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.ClientSecret, err = encrypter.DecryptString(o.ClientSecret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'ClientSecret' for 'MTLSSourceEntra' (%s): %w", o.Identifier(), err)
	}

	if o.EntraAccessToken, err = encrypter.DecryptString(o.EntraAccessToken); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'EntraAccessToken' for 'MTLSSourceEntra' (%s): %w", o.Identifier(), err)
	}

	return nil
}

// DeepCopy returns a deep copy if the MTLSSourceEntra.
func (o *MTLSSourceEntra) DeepCopy() *MTLSSourceEntra {

	if o == nil {
		return nil
	}

	out := &MTLSSourceEntra{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MTLSSourceEntra.
func (o *MTLSSourceEntra) DeepCopyInto(out *MTLSSourceEntra) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MTLSSourceEntra: %s", err))
	}

	*out = *target.(*MTLSSourceEntra)
}

// Validate valides the current information stored into the structure.
func (o *MTLSSourceEntra) Validate() error {

	elemental.ResetDefaultForZeroValues(o)

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MTLSSourceEntra) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MTLSSourceEntraAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MTLSSourceEntraLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MTLSSourceEntra) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MTLSSourceEntraAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MTLSSourceEntra) ValueForAttribute(name string) any {

	switch name {
	case "clientID":
		return o.ClientID
	case "clientSecret":
		return o.ClientSecret
	case "clientTenantID":
		return o.ClientTenantID
	case "entraAccessToken":
		return o.EntraAccessToken
	case "graphEventSecret":
		return o.GraphEventSecret
	case "graphEventsEnabled":
		return o.GraphEventsEnabled
	case "graphSubscriptionExpiration":
		return o.GraphSubscriptionExpiration
	case "graphSubscriptionIDs":
		return o.GraphSubscriptionIDs
	}

	return nil
}

// MTLSSourceEntraAttributesMap represents the map of attribute for MTLSSourceEntra.
var MTLSSourceEntraAttributesMap = map[string]elemental.AttributeSpecification{
	"ClientID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description: `The oauth clientID if any. This may be required for autologin, depending on the
mode.`,
		Exposed: true,
		Name:    "clientID",
		Stored:  true,
		Type:    "string",
	},
	"ClientSecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description: `Client secret associated with the client ID. This may be required for autologin,
depending on the mode.`,
		Encrypted: true,
		Exposed:   true,
		Name:      "clientSecret",
		Required:  true,
		Secret:    true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"ClientTenantID": {
		AllowedChoices: []string{},
		BSONFieldName:  "clienttenantid",
		ConvertedName:  "ClientTenantID",
		Description: `ID of the tenant for the identity provider, if any. This may be required for
autologin, depending on the mode.`,
		Exposed: true,
		Name:    "clientTenantID",
		Stored:  true,
		Type:    "string",
	},
	"EntraAccessToken": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "entraaccesstoken",
		ConvertedName:  "EntraAccessToken",
		Description:    `Stores the latest Entra Access Token.`,
		Encrypted:      true,
		Name:           "entraAccessToken",
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"GraphEventSecret": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "grapheventsecret",
		ConvertedName:  "GraphEventSecret",
		Description:    `Holds the secret used to authentify the calls from Entra.`,
		Name:           "graphEventSecret",
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"GraphEventsEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "grapheventsenabled",
		ConvertedName:  "GraphEventsEnabled",
		Description: `Enables background jobs to maintain subscriptions to Entra to be notified of
changes in groups, users and memmber assignation. This requires A3S to be
configured with an event hook endpoint.`,
		Exposed: true,
		Name:    "graphEventsEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"GraphSubscriptionExpiration": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "graphsubscriptionexpiration",
		ConvertedName:  "GraphSubscriptionExpiration",
		Description:    `Holds when the subscription will expire.`,
		Name:           "graphSubscriptionExpiration",
		Stored:         true,
		Transient:      true,
		Type:           "time",
	},
	"GraphSubscriptionIDs": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "graphsubscriptionids",
		ConvertedName:  "GraphSubscriptionIDs",
		Description:    `Holds the last subscription IDs to try to renew them.`,
		Name:           "graphSubscriptionIDs",
		Stored:         true,
		SubType:        "map[string]string",
		Transient:      true,
		Type:           "external",
	},
}

// MTLSSourceEntraLowerCaseAttributesMap represents the map of attribute for MTLSSourceEntra.
var MTLSSourceEntraLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"clientid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientid",
		ConvertedName:  "ClientID",
		Description: `The oauth clientID if any. This may be required for autologin, depending on the
mode.`,
		Exposed: true,
		Name:    "clientID",
		Stored:  true,
		Type:    "string",
	},
	"clientsecret": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientsecret",
		ConvertedName:  "ClientSecret",
		Description: `Client secret associated with the client ID. This may be required for autologin,
depending on the mode.`,
		Encrypted: true,
		Exposed:   true,
		Name:      "clientSecret",
		Required:  true,
		Secret:    true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"clienttenantid": {
		AllowedChoices: []string{},
		BSONFieldName:  "clienttenantid",
		ConvertedName:  "ClientTenantID",
		Description: `ID of the tenant for the identity provider, if any. This may be required for
autologin, depending on the mode.`,
		Exposed: true,
		Name:    "clientTenantID",
		Stored:  true,
		Type:    "string",
	},
	"entraaccesstoken": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "entraaccesstoken",
		ConvertedName:  "EntraAccessToken",
		Description:    `Stores the latest Entra Access Token.`,
		Encrypted:      true,
		Name:           "entraAccessToken",
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"grapheventsecret": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "grapheventsecret",
		ConvertedName:  "GraphEventSecret",
		Description:    `Holds the secret used to authentify the calls from Entra.`,
		Name:           "graphEventSecret",
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"grapheventsenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "grapheventsenabled",
		ConvertedName:  "GraphEventsEnabled",
		Description: `Enables background jobs to maintain subscriptions to Entra to be notified of
changes in groups, users and memmber assignation. This requires A3S to be
configured with an event hook endpoint.`,
		Exposed: true,
		Name:    "graphEventsEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"graphsubscriptionexpiration": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "graphsubscriptionexpiration",
		ConvertedName:  "GraphSubscriptionExpiration",
		Description:    `Holds when the subscription will expire.`,
		Name:           "graphSubscriptionExpiration",
		Stored:         true,
		Transient:      true,
		Type:           "time",
	},
	"graphsubscriptionids": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "graphsubscriptionids",
		ConvertedName:  "GraphSubscriptionIDs",
		Description:    `Holds the last subscription IDs to try to renew them.`,
		Name:           "graphSubscriptionIDs",
		Stored:         true,
		SubType:        "map[string]string",
		Transient:      true,
		Type:           "external",
	},
}

type mongoAttributesMTLSSourceEntra struct {
	ClientID                    string            `bson:"clientid,omitempty"`
	ClientSecret                string            `bson:"clientsecret"`
	ClientTenantID              string            `bson:"clienttenantid,omitempty"`
	EntraAccessToken            string            `bson:"entraaccesstoken,omitempty"`
	GraphEventSecret            string            `bson:"grapheventsecret,omitempty"`
	GraphEventsEnabled          bool              `bson:"grapheventsenabled"`
	GraphSubscriptionExpiration time.Time         `bson:"graphsubscriptionexpiration,omitempty"`
	GraphSubscriptionIDs        map[string]string `bson:"graphsubscriptionids,omitempty"`
}
